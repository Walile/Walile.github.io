{"posts":[{"title":"[PHP] 如何計算日期？ (ex. 前一天或後一天的日期)","text":"因為之前一直忘記，所以特別就寫起來…. 計算2007/12/07的前一天以及後一天的日期12345678910111213141516$date = &quot;2007/12/07&quot;;//先拆出日、月、年的數字$tmp = explode(&quot;/&quot;, $date);//轉換日期為毫秒$inputdate = mktime(0, 0, 0, $tmp[1], $tmp[2], $tmp[0]);//換算前一天日期$lastdate = date(&quot;Y/m/d&quot;, ($inputdate - 1 * 24 * 60 * 60));//換算後一天日期$nextdate = date(&quot;Y/m/d&quot;, ($inputdate + 1 * 24 * 60 * 60));","link":"/2007/12/07/2007-12-07-php-how-to-calculate-yesterday-or-tomorrow-date/"},{"title":"[FTP] FTP簡要介紹","text":"簡單的FTP(File transfer potocol)介紹…這個應該可以簡單的了解ftp的流程… 詳細的解說及指令需要去看RFC 959了基本上，FTP分成二個部分：指令控制port及檔案傳輸port。 指令控制：一般常用指令如以下 ABOR 中斷之前連接LIST 列出目錄PORT 列出可傳輸埠號QUIT 結束連線RETR 擷取檔案STOR 存放檔案SYST 取得server系統型態TYPE 改變狀態： A為ASCII模式，I為binary模式 檔案傳輸：檔案傳輸方式有分成三種，分別為串流、區塊及壓縮模式。 關於FTP server回覆訊息：訊息分別為以下二種，1種為系統回覆，1種為錯誤訊息系統回覆：1xy 準備接受指令2xy 結束指令3xy 結束指令但仍需要指令繼續完成4xy 有問題但可以稍後繼續嘗試5xy 錯誤但是無法稍後嘗試 錯誤回覆：x0y 語法錯誤x1y ftp回覆資訊x2y 指令結束資訊x3y 認證資訊x4y 無列舉資訊x5y 檔案系統狀態資訊 另外關於使用PORT或PASV指令得到檔案傳輸連結port的資訊該如何得知需要連到那個port..ex. 10, 38, 2, 103, 8, 102explane:10.38.2.103 —&gt;此為IP位置8*256+102—–&gt;此為port號","link":"/2009/01/18/2009-01-18-ftp-simple-introduction/"},{"title":"[Actionscript] 好用的IDE: flashdevelop設定 (only for windows)","text":"預先記得先裝好.Net Framework2.0，，因為flashdevelop是用.net寫成的。此外，因為這個IDE已經整合好了，所以不用裝ant，但是記的要裝java SDK。 先到FlashDevelop.org下載版本，目前我是用3.0.0beta 9。 到adobe的網站上下載flex的SDK(是SDK，別下載錯了)目前是用flex3的版本。 下載flash10的player 一樣在adobe的網站上找的到。 在flashdevelop的選單中的「Tools/setting」選擇AS3Context_plugin的地方，將flex SDK location中設定自己本機上放置flex sdk的位置。 再來設定flash preview的地方。接下來選擇「FlashViewer plugin」的選項，然後將「External Player Location」設為放置flash player 10的路徑，並且將Movie display type的地方更改為External. 接下來，開一個檔案，將語法設定為AS3，然後輸入以下建立一個hello world的程式！ 比較 ==123456789101112package { import flash.display.*; import flash.events.*; public class Test extends Sprite { public function Test() { } }} 如果按ctrl+F8後有成功編譯，就是設定成功了","link":"/2009/01/04/2009-01-04-actionscript-ide-flashdevelop-setting/"},{"title":"[sybase]在sybase如果設定identity 為0","text":"1sp_chgattribute table_name, ‘identity_burn_max’, 0, ’1′","link":"/2009/01/18/2009-01-18-how-to-set-0-at-indentity-in-syabse/"},{"title":"[Python] 如何在Python中顯示中文，並且不會出現編譯錯誤？","text":"一開始在學習Python的時候，想在程式中顯示中文…. 在寫Python的時候發現文件中出現中文的時候，在編譯時會出現以下錯誤： 1&quot;UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xb6 in position 0: ordinal not in range(128) &quot; 之類的訊息。所以解法如下： 建立一個python檔案名稱為sitecustomize.py。 存到你的python安裝目錄Libsite-packages 檔案內容為： 12import sys sys.setdefaultencoding(‘utf-8′)# replace with encoding you want to be the default one 存好後，重新再編譯就成功了 如果再不行，參照python官方網站 說明 有解決方法！","link":"/2009/01/20/2009-01-20-how-to-show-traditional-chinese-in-python/"},{"title":"[Ubuntu] 利用vsftpd結合mysql管理ftp使用者(vsftpd虛擬使用者)","text":"看了網路上一票文章，做出來的都有問題，後來發現原因出在改錯PAM檔結果不是因為出錯後來連root使用者都無法登入，要不然就是無法使用自己在mysql中建立的使用者進行登入但是找不到問題點。接下來是這次實作後的結果：(我預設是mysql可以管理使用者，但是系統原來的使用者也可以登入為前提) ##說明：##提供一個讓每次主機管理人員一個一個做開立系統帳號及設定權限動作將會讓管理人員帶來管理上煩惱的解決方案。##環境：##系統: Ubuntu 8.10vsftpd和mysql 模組請安裝pam_mysql.so ##設定前說明：##其實這要綁定vsftpd是利用unix帳號做登入帳號管理，所以想利用mysql做管理的話(一般叫做建立vsftpd虛擬使用者)，必需要透過linux中做認證管理的PAM(Pluggable Authentication Modules)做處理，這樣才能將vsftp+mysql+unix帳號綁定管理。 開始進行:STEP1. 先下載vsftpd以及mysql先安裝好….(unbuntu 不用說吧？apt-get install 套件名稱) STEP2. 設定/etc/vsftpd.conf 檔，將設定檔加上以下二個個設定： guest_enable=YESguest_name=使用者名稱，本例使用名稱為virtual (這個使用都必需是在unix account中建立的，之後要提供給使用者使用的) STEP3. 設定mysql：mysql中，先在mysql資料庫的user這個table中，建立一個專門讓pam認證使用登入的使用者，在本例中使用的名稱叫virtual，並且只能做select的動作，並且用localhost登入。接下來，建立一個db叫做vsftpd，裡面建立了一個table叫做users，這個是要用來管理虛擬使用者的table。其中的table我建立了username和passwd二個欄位(注意！如果有使用加密，像mysql的password加密欄位，其password欄位請開超過60，否則會認證失敗)。記得要先在這個table中先建立一個使用者，等一下用來測試用。(ex. user，密碼暫設為pass) STEP4. 開始來設定pam了…./etc/pam.d/common-auth這個檔案要加入以下這個 1auth sufficient pam_mysql.so user=virtual passwd=pass host=localhost db=vsftpd table=users usercolumn=username passwdcolumn=passwd crypt=2 /etc/pam.d/common-account 這個檔案要加入的 1account sufficient pam_mysql.so user=virtual passwd=pass host=localhost db=vsftpd table=users usercolumn=username passwdcolumn=passwd crypt=2 其中，在pam_mysql.so後面出現的user=virtual和passwd=pass是指在mysql中mysql資料庫user這個table中，剛剛有設定可以登入mysql的使用者帳號及密碼。另外，crypt=2代表密碼是用mysql password hash做為加密。(1為unix DES加密、2為mysql password hash加密、3為MD5加密、4為SHA)若要使用SHA加密，其pam_mysql.so的版本需要0.7以上版本才有支援(但是目前都為RC版本)接下來，重啟服務： 1/etc/init.d/vsftpd restart 這樣就完成了！ 接下來，進一步想要讓虛擬帳號移到自己的資料夾中，只需要做接下來的動作：在/etc/中建立一個資料夾為vsftpd_user_config，然後在/etc/vsftpd.conf中，加入二行： 12user_config_dir=/etc/vsftpd_user_configuser_sub_token=$USER 然後，在vsftpd_user_config這個資料夾中，建立以虛擬使用者為名稱的檔案。ex. user。然後檔案內只需要加一行來指定登入後要移至的位置： 1local_root=/home/user 再重啟服務就完成了！","link":"/2009/02/15/2009-02-15-how-to-use-vsftpd-bind-mysql-to-manage-ftp-users/"},{"title":"[Ubuntu] 將vsftpd加上SSL使用","text":"vsftpd需要加密，本身有支援SSL，不過這樣做需要有幾個動作： STEP 1. 安裝所需軟體 OpenSSL以及vsftpd，在Ubuntu底下請用apt-get install來安裝 STEP 2. 設定認證 建立ssl key 1openssl req -x509 -nodes -days 730 -newkey rsa:1024 -keyout /etc/vsftpd/vsftpd.pem -out /etc/vsftpd/vsftpd.pem 這樣會把建立的ssl key存在/etc/vsftpd/vsftpd.pem這個檔案中。 STEP 3. 設定vsftpd 1234ssl_enable=YES #代表使用SSL加密ssl_tlsv1=YESrsa_cert_file=/etc/vsftpd/vsftpd.pem #設定簽證所在位置rsa_private_key_file=/etc/vsftpd/vsftpd.pem #設定私錀所在位置 STEP 4. 重啟service重啟vsftpd的服務/etc/init.d/vsftpd restart這樣就可以了。","link":"/2009/02/18/2009-02-18-how-to-use-vsftpd-with-ssl/"},{"title":"[Android] 在Netbeans上使用Android platform plugin","text":"在netbeans上安裝Android platform plugin 使用編輯器：netBeans 6.5 plugin： android plugin ##開始##STEP 1. 先點選在netbeans的「Tools/Plugins」，然後，選擇「Download。接下來會看到有一個「Add Plugins..」的按鍵。先點「Add Plugins..」後，將剛先在plugins 下載下來的檔案全部一個一個加進去後，安裝。 Step 2. 建立一個Android的專案，選擇使用「Android」，然後按下「Next」，接著會發現在「Android platform」的地方會沒有出現Android的platform的字眼。現在請按下「Manage Platforms」，再按下跳出視窗中，有一個「Add Platforms」，選擇「Google Android open handheld platform」，再去選擇從google下載下來的Google Android的SDK資料夾，就大功告成。 ##後記：## 剛設定完後，在編譯程式會出現build_impl.xml第440行的錯誤，這時候是因為apkbuilder.jar的位置設定是有問題的。所以接下來先直接去自己下載的android sdk資料夾中，編輯在tools資料夾中的apkbuilder.bat。將frameworkdir和libdir這二個地方填上路徑，就ok了。","link":"/2009/03/09/2009-03-09-install-android-platofrm-in-netbeans/"},{"title":"[Bazzar] 環境架設 (使用sftp為protocal)","text":"安裝軟體： bazaar (在ubuntu裡面套件名稱為bzr) 安裝python套件：python-paramiko Python 2.5 (server上跑2.6的話，在啟動bazaar server後，client端取得log時會出現程式錯誤) ##開始動工：## ###步驟一：### 先將所需套件裝好，將SSH以及vsftp、bazaar(話說bazaar在Ubuntu的套件裡面是叫bzr) ###步驟二：### 開始要來處理bzr的設定了。 ####(1) 先建立整個project要置放的repo在那邊，例如：/var/project 這個資料夾。#### bzr init-repo /var/project 接著，建立一個專案為：prj1在/var/project這個資源庫中。接下來使用以下指令… 123bzr init prj1bzr addbzr commit -m &quot;Initial import&quot; 這樣第一個專案就產生了。 ####(2) 在主機上設定bzr://供使用者可以check out或branch出來#### 在主機上鍵入以下指令： 1sudo bzr serve –port=872 –directory=/var/project 此行port指定為872(預設bzr://為4155 port)，並且指定資料夾讀取為/var/project這個資料夾為預設。 這樣就已經在server上起好了bazaar的server了。 先在project內建立第一個專案，名稱為prj1 1sudo bzr init prj1 接下來就會看到一個專案建立在資源庫中了！ ####(3)在client安裝bazaar#### 個人在我的clinet (windows xp電腦一台)上安裝的是Qbzr，使用Python 2.5執行。 其實會使用Qbzr原因其實也很簡單，因為不需要裝一堆套件。直接安裝後就可以使用。(但是還是指令型的操作方式，並非是圖形介面) 接下來執行一下Qbzr，來試一下利用bzr提供的protocal看看有沒有成功。(注意，這個時候咱還沒有定ssh..只是確認一下目前架設的環境是成功的。) 在執行Qbzr的時候，下一個指令： 1bzr log bzr://server:port/prj1 成功的話，會看到畫面出現有關於prj1這個project的版本訊息。 以上都是利用bzr://為protocal運作。 接下來要使用的話，其實只要直接將bzr://改成用sftp://就可以了。 另外，用sftp://的時候，不需要起bzr server… —&gt;應該不少人看到這句就會想打我….因為其實用了python-paramiko的關係，不用像ssh+bzr這麻煩XD","link":"/2009/05/13/2009-05-13-bazzar-envirement-installation-using-sftp/"},{"title":"[Django] 入門學習 I","text":"本篇將開始進行Django入門。在接下來的文章中會建立一個簡單的blog系統。在繼續之前，請檢查是否已經有安裝了Python以及Django，如果還沒有的話，請先安裝後再進行接下來的動作。(本篇為學習文。如果有內文有問題請告訴我，感謝！) 請注意：基本上，接下來的動作都是以python指令，所以應該是沒有windows或是其他作業系統的問題。唯一要注意的是，如果unix like系統的朋友們可能需要注意一下可能會出現的權限問題。 ##1. 建立專案## 這次要建立的專案，專案名稱就叫「blog」，我們可以透過指令建立一個屬於Django的web應用程式。 ====================================== 我們要開始建立專案。所以指令下了： 1django-admin.py startproject blog 指令說明： 1django-admin.py startproject &lt;專案名稱&gt; 專案名稱會出現在該專案的資料夾名稱 ====================================== 建立專案後，會發現專案名稱和資料夾的名稱是一樣的。接下來我們進入blog這個資料夾查詢，會發現有以下幾個檔案： 1234\\_\\_init\\_\\_.py # 告知python這個為python的packagemanage.py # 一個命令工列工具，可以從這邊了解更多有關於manage.py的細節。settings.py # 設定Django專案，可以從這邊了解如何去做設定。urls.py # 有關Django專案url的宣告。可以從這邊了解更多。 ##2. 設定/啟動開發server## 接下來，先將目前的路徑切換到開發專案資料夾中。照目前自己開發的blog專案放置位置在d:pyblog中。所以利用cmd(Dos模式)切換到d:pyblog 後，鍵入以下指令啟動server功能來查看目前的Django專案。 1python manage.py runserver 當啟動成功時，會出現類似如下的訊息： 12345678910Django version 1.0.2 final, using settings ‘blog.settings’Development server is running at http://127.0.0.1:8000/Quit the server with CTRL-BREAK.Django version 1.0.2 final, using settings ‘blog.settings’Development server is running at http://127.0.0.1:8000/Quit the server with CTRL-BREAK. 這代表目前開發伺服器已啟動，並且預設是用port 8000為連結接口。只需要在瀏覽器上打上http://127.0.0.1:8000/ 並且在畫面上有看到「It’s Worked…」之類的訊息，就代表目前的設定為成功的。 如果想要關閉目前的server設定，只需要在剛剛啟動的Dos模式中，直接按「ctrl + c」就會關閉服務。 但是如果想要指定其他的port進行服務的話，只需要這樣下： 1python manage.py runserver &lt;port號&gt; ex. 1python manage.py runserver 127.0.0.1:8080 這樣服務就可以透過本機的8080 port進行服務了 詳細的設定可以見manage.py的runserver篇。 ##3. 資料庫設定## 接著要先來設正資料庫。我們要先打開settings.py這個檔案。修改以下個設定： 123456DATABASE_ENGINE = (這邊要填入資料庫的名稱，像是sqlite、mysql、oracle)DATABASE_NAME = (資料庫的名稱，如果是sqlite為資料庫的路徑。本例中只有設定一個資料庫的名稱，就叫「blog」)DATABASE_USER = (資料庫使用者名稱。sqlite不使用)DATABASE_PASSWORD = (這邊要填入資料庫的密碼。sqlite的話不使用)DATABASE_HOST = (資料庫所在的位置。預設是localhost，sqlite不使用)DATABASE_PORT = (不填為預設port, sqlite不使用) 目前是使用sqlite3為資料庫。sqlite3不需要設定到DATABASE_NAME，有需要資料庫的時候，Django會自動建立一個資料庫出來。 當資料庫的設定結束後，接下來需要一個指令處理： 1python manage.py syncdb 指令執行後，Django會開始建立一些東西，還有權限、使用者、群組、網站…等等之類的設定。然後畫面上會跳出來問是否需要安裝Djang的認證系統以及建立一個superuser。在此選擇Yes來安裝這些東西。當完成後會直接回到提示字元上。 本文參考Django document一邊做一邊翻譯一邊寫出來的….","link":"/2009/06/16/2009-06-16-django-learning-i/"},{"title":"[Django] 入門學習 II","text":"開始來準備建立模組(models)了。 但是在此之前，有需要解譯一下apps和project不同的地方，簡言之，project專案中會含蓋很多apps。其實意思是很多的application會組成一個專案。那application就像是一個後台功能、一個weblog系統之類的。這應該是比較好懂的解譯法。知道這二者的不同之處後，接下來要做的，就是要來建立一個app了。 接下來要建立的app將在之前的blog專案中建立。所以請先確認目前自己下指令的位置是不是在上一篇先建立的blog專案的路徑中。(在本範例中是在d:pyblog 中)如果沒有的話，請先進入到blog專案的位置。(如果還沒建立blog專案，請先參照此文進行建立專案的動作後，再回來繼續下去。)然後，接下來建入以下的指令： 1python manage.py startapp polls 輸入執行後，會發現在原來的資料夾中，多了一個叫做「polls」的資料夾，其中也出現了三個檔案：「models.py 、views.py 、 init.py」下一步開始，要來建立這個polls的相關功能還有資料表了。 建立資料表在Django可不是直接去資料庫去建上一個，而是利用本身Django的ORM的機制做來。怎麼做呢？來寫個class就可以了。現在我們打開在polls資料夾一個叫做models.py的檔案，並且將以下的程式寫入： 123456789101112131415from django.db import modelsclass Poll(models.Model):question = models.CharField(max_length=200)pub_date = models.DateTimeField(‘date plublished’)class Choice(models.Model):poll = models.ForeignKey(Poll)choice = models.CharField(max_length=200)votes = models.IntegerField() 註：max_length需要最新版本的Django才不會出錯！ 在以上的程式中所定義的，是這個polls app所需要的資料表及欄位設定(像是data type或是欄位長度、那個是ForeignKey)。在這邊定義了二個table。詳細設定請再參照Django document。 關於Model欄位設定相關資料類型的部分請參照這邊 當將models.py程式寫好後。請記得存檔。 開始準備要進行啟動模組的動作了。在啟動的過程式將會把上文所設定的database schema一併開好。 在啟動模組前，先做一個設定上的動作。將polls這個模組放進去。所以，請先打開blogs資料夾中的settings.py這個檔案，然後找到INSTALLED_APPS的地方進行編輯： 12345678910111213141516INSTALLED_APPS = (‘django.contrib.auth’,‘django.contrib.contenttypes’,‘django.contrib.sessions’,‘django.contrib.sites’,‘django.contrib.admin’,‘blog.polls’} 紅色的地方是自己需要加上去的。是自己目前新增的功能。目前加的是blogs專案的polls功能，所以就寫上「blogs.polls」(記得要加單引號代表為字串)這個意思是讓這個系統有polls這個功能。 接下來在blog資料夾執行以下指令：(不要進polls資料夾) 1python manage.py sql polls 當指令執行成功，會出現以下的訊息： 1234567891011121314151617181920212223242526272829BEGIN;CREATE TABLE &quot;polls_poll&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY,&quot;question&quot; varchar(200) NOT NULL,&quot;pub_date&quot; datetime NOT NULL);CREATE TABLE &quot;polls_choice&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY,&quot;poll_id&quot; integer NOT NULL REFERENCES &quot;polls_poll&quot; (&quot;id&quot;),&quot;choice&quot; varchar(200) NOT NULL,&quot;votes&quot; integer NOT NULL);COMMIT; 其實這個就是表示成功產生polls這個app所要使用的table的sql。而這些sql其實就是之前寫程式設定的table還有欄位的設定sql。接著，要真正的在資料庫中建立這個app的table，請下下面的指令執行： 1python manage.py syncdb 如果沒有看到錯誤訊息，這樣就完成了。此外，關於table的查詢，可以透過database api document這篇文章來使用。 後台開始要來設定了。首先打開blog資料夾中的settings.py，將後台的管理系統加入。一樣是加在「INSTALLED_APPS」之中。 12345678INSTALLED_APPS = (‘django.contrib.auth’,‘django.contrib.contenttypes’,‘django.contrib.sessions’,‘django.contrib.sites’,‘blog.polls’,‘django.contrib.admin’) 接著，一樣來下個指立建立一下db吧 1python manage.py syncdb 接下來要編輯blog資料夾中的urls.py。然後將第4,5,16行的註解拿掉。程式就會長得像下面的樣子： 12345678910111213141516rom django.conf.urls.defaults import *Uncomment the next two lines to enable the admin:from django.contrib import adminadmin.autodiscover()urlpatterns = patterns('',# Example:# (r'^blog/', include('blog.foo.urls')),# Uncomment the admin/doc line below and add 'django.contrib.admindocs'# to INSTALLED_APPS to enable admin documentation:# (r'^admin/doc/', include('django.contrib.admindocs.urls')),# Uncomment the next line to enable the admin:(r'^admin/(.*)', admin.site.root),) 現在可以來看看目前網站的樣子 接下來執行一下… 1python manage.py runserver 執行後，直接連過去看(目前我是跑在本機，所以網址是http://localhost:8000/admin/)我們就可以看到網站管理的後台登入畫面出現了！請登入！(可是有中文的哩)英文版的登入後會出現下面的畫面: 現在在畫面上還看不到之前我們寫的Polls這個app，所以我們要做一個動作將我們寫的polls註冊進入這個管理系統。在blog資料夾裡頭polls這個資料夾建立一個叫做admin.py的檔案。並且鍵入下面的程式碼： 123from blog.polls.models import Pollfrom django.contrib import adminadmin.site.register(Poll) 接下來只要重新啟動server，就可以在畫面上看到polls已經被加入到系統裡面了。 當你點了Polls進去後，會看到可以新加post，一切都是自動產生出來的功能。當然，已經有新增的項目也可以做修改的動作。 下一步開始，將要來客制化這個表單。","link":"/2009/06/29/2009-06-29-django-learning-ii/"},{"title":"[PHP] 語法中 &#x3D; 與 &#x3D;&#x3D; 及 &#x3D;&#x3D;&#x3D; 有何不同？","text":"一般來說應該是需要在學習PHP的時候，就該了解到這三者有什麼樣的不同。後來就特別查了一下。 一般來說 “ = “ 在程式語言中，都是指assign的意思。而 “ == “ (equal) 主要是在比較二個值是否是一樣的。 比較 ==12345if(&quot;22&quot; == 22){ echo &quot;true&quot;;}else{ echo &quot;false&quot;;} 這個範例很清楚，在這個範例中，會印出true，因為他們二個的「值」都是22。 此外，” === “ (identical) 除了比較二者的「值」之外，還會再針對二者的物件類型還有reference是不是一樣的。如下面的範例： 比較 ==12345if(&quot;22&quot; === 22){ echo &quot;true&quot;;}else{ echo &quot;false&quot;;} 結果會印出false。因為”22″和22是不一樣的。”22″是字串類型，而22是Interger，這並不是同一種類別，所以會印出false。但是，如果是 = 的話就不一樣了。因為 = 的意思是assign 。以下程式是常不小心就有可能出現的片段： 比較 =12345if($val = 22){ echo &quot;true&quot;;}else{ echo &quot;false&quot;;} 這段程式會出現什麼？就是$val的值會變成22。其實很容易在寫程式的時候不小心就會出現這種錯誤，慘的是，這種錯還常常找不到問題在那邊。所以其實程式中出現了 if($val = 22)的意思，就會變成是$val的值是22，而不是二者做比較。(註：if(“22″ == 22) 的話，會出錯。這樣可以方便在寫程式的時候避免產生錯誤) 參考資料來源： Difference between ‘==’ (equal) and ‘===’ (identical) comparison operators in PHP (with examples) techsww_tutorials","link":"/2009/06/28/2009-06-28-php-different-between-equals/"},{"title":"[freeBSD]在freeBSD上安裝webmin以及bazzar","text":"在FreeBSD上安裝webin。首先先來安裝bazaar。但是因為bazaar是基於python上的東西，所以必需要先安裝python才行。 接下來的安裝都會透過ports系統來處理，先來說明一下如何安裝python。(目前使用python2.5版，FreeBSD為7.2版) 在提示字元底下，直接下以下指令： 1cd /usr/ports/lang/python25/ &amp;&amp; make install clean python25是指版本，其他版本可以在這邊更改。接著，只要按下enter後，就會直接進行安裝動作。 注意：請記得先取得管理者權限。 然後，現在再來安裝bazaar 1cd /usr/ports/devel/bazaar/ &amp;&amp; make install 安裝完畢，現在來安裝的是openldap 1cd /usr/ports/net/openldap24-server/ &amp;&amp; make install clean 安裝後，要設定幾個東西： 先修改/usr/local/etc/openldap/sldap.conf 加入以下的schema 123456include /usr/local/etc/openldap/schema/core.schemainclude /usr/local/etc/openldap/schema/cosin.schemainclude /usr/local/etc/openldap/schema/misc.schemainclude /usr/local/etc/openldap/schema/inetorgperson.schemainclude /usr/local/etc/openldap/schema/openldap.schemainclude /usr/local/etc/openldap/schema/nis.schema 另外，再寫入存取限制 1234567891011access to attr=這是密碼by self writeby anonymous authby dn.base=&quot;cn=Manager,dc=books,dc=com,dc=tw&quot; writeby * noneaccess to *by self writeby users readby anonymous readby dn.base=&quot;cn=Manager,dc=books,dc=com,dc=tw&quot; writeby * none 然後記得去更改suffix的dc以及rootpw的密碼，就完成設定了。(密碼可以用明碼，或是用slappasswd產生一個加密後的密碼再填上去) 最後，啟動一下openLDAP 1echo ‘slapd_enable=&quot;YES&quot;‘ &gt;&gt; /etc/rc.conf ; /usr/local/etc/rc.d/slapd start 大致上告一段落了。接著就是要處理webmin的安裝了。webmin，本身也可以直接透過ports安裝所以在提示字元下直接可以下下面的指令： 1cd /usr/ports/sysutils/webmin &amp;&amp; make install clean 接著系統就會開始安裝了。 然後，要來設定啟動webmin來管理系統了 1/usr/local/lib/sebmin/setup.sh #這個是先做設定的動作 待安裝完並且設定後鍵入以下指定啟動 1/usr/local/etc/webmin/start 停止系統使用以下指令 1/usr/local/etc/webmin/stop 接著，已經可以看到webmin了。 http://ip:設定的port number(預設是10000) ex. http://localhost:100000 就可以看的到webmin的畫面了。","link":"/2009/07/13/2009-07-13-install-webmin-and-bazzar-on-freebsd/"},{"title":"[PHP]如何在CentOS 5.2上安裝php5的zipArchive (使用PECL)","text":"因為在CentOS 5.2的repo中並沒不能安裝。只好另想辦法… 第一步：安裝yum的plugin： yum-priorities 先在提示字元下鍵入： 1yum install yum-priorities 就會直接去安裝完畢。接著，直接編輯 /etc/yum/pluginconf.d/priorities.conf 這個檔案。更改或加入以下資訊： 123enable = 1check_obsoletes=1priority=N 存檔後離開。 第二步：設定EPEL 接著在提示字元下，直接執行： 1rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-3.noarch.rpm 第三步：安裝zipArchive 只需要在提示字元下鍵入： 1yum install php-pecl-zip 就大功告成了…. 但是…..記得將httpd重起才會生效….","link":"/2009/07/15/2009-07-15-how-to-install-php5-ziparchive-extension-from-pecl-on-centos-5-dot-2/"},{"title":"[mercurial] hg 設定","text":"123[web]push_ssl = falseallow_push = * 因為預設hg新建資源庫的時候，會用ssl potocal所以如果不想用，可以在repo中的./svn這個資料夾中，找hgrc這個檔案(如果沒有新增一個)，然後加上上頭的資訊。「allow_push = 」設定為「」為表示大家都可以進行存取該資源庫的動作，不需要經過認證。如果有需要認證的話，這個部分需要再做設定。","link":"/2009/12/17/2009-12-17-hg-setting/"},{"title":"常見的alpha, beta在軟體出出現的意思是什麼？","text":"工作上需要參考這類的名詞定義加上因為太常看到，而很多時候不知道是怎麼回事，於是就查了一下，把詳細的部分就截錄下來： Alpha: 希臘數字中的第一個「α」，意謂著比Beta版還早的版本測試，主要為內部測試使用，並且仍有不少問題待測試及修正。 Beta: 希臘數字中的第一個「β」，意思就是測試版，不過這個版本可以一直加入新的功能。 RC (release condidate): 主用在正式發表前的確認版本。與beta不同的地方在於幾乎不再加入新功能，而將目標著重在除錯上。並且嚴重錯誤影響功能無法運作這類影響主要功能的問題需要解決，不能出現在RC上。 RTM: 主要給工業壓片用，但是內容跟正式版是一樣的。一般來說這個程序完成的程式碼也叫「final code」 OEM: 隨機販售版本。字意上就是會隨著機器出貨，但是包裝上很簡略。在正式版上的OEM是不能做升級安裝的。 這個是比較常見的部分，其他的部分就要再參照文章來源的部分了。 什么是Alpha，Beta，RC，RTM，OEM版 [推荐]名词解释:什么是Alpha Beta RC RTM OEM版 wiki: 軟體版本週期 軟體版本號","link":"/2009/12/18/2009-12-18-what-is-alpha/"},{"title":"spring2 and velocity implement i18n","text":"這次手上的專案，因為使用了Hiberanet + Spring 2.x mvc + Velocity 1.6.3結合組成。處理i18n的時候，其實有點不知道該怎麼做。因為純Spring處理時，可以直接利用內建的spring mvc viewer tag去標示在view之中。只是這次view的部分使用了Velocity，於是必需要想一下該怎樣才能將訊息正確的出現在view的部分。 123&lt;bean id=&quot;velocityConfig&quot; class=&quot;org.springframework.web.servlet.view.velocity.VelocityConfigurer&quot;&gt;&lt;property name=&quot;resourceLoaderPath&quot; value=&quot;/&quot; /&gt;&lt;/bean&gt; 其實這段設定，只是在設定view的地方使用Velocity。接下來要來設定在applicationContext中的細部設定。 1234&lt;bean id=&quot;messageSource&quot;&gt;&lt;property name=&quot;basename&quot; value=&quot;message&quot; /&gt;&lt;property name=&quot;useCodeAsDefaultMessage&quot; value=&quot;true&quot; /&gt;&lt;/bean&gt; basename的部分是在設定properties的檔案prefix的部分。接下來想設定可讀取message_en_us.properties以及message_zh_tw.properties二個檔案。其中前頭為「message」開頭，所以basename的value則設定為message。此外，另外在useCodeAsDefaultMessage的地方設定預設語言的部分設定為true。 123&lt;bean id=&quot;localeChangeInterceptor&quot;&gt;&lt;property name=&quot;paramName&quot; value=&quot;lang&quot; /&gt;&lt;/bean&gt; 在localeChangeInterceptor的地方，property可以設定利用那個參數來接收設定語系參數值。 123456&lt;bean id=&quot;defaultUrlMapping&quot;&gt;&lt;property name=&quot;interceptors&quot; ref=&quot;localeChangeInterceptor&quot; /&gt;&lt;property name=&quot;order&quot;&gt;&lt;value&gt;1&lt;/value&gt;&lt;/property&gt;&lt;/bean&gt; 因為我有設定defaultUrlMapping，所以只要設定URL參數有lang=語系，就會讀取相關的properties檔案。 Velocity的部分，就使用#springMessage(messageCode) or #springMessageText(messageCode, defaultText).這二個method套用在view端將資訊顯示出來即可。 如果在處理過程中，出現如”Cannot change HTTP accept header - use a different locale resolution strategy”的訊息告知，則代表原Spring source code中有限制。所以需要改寫方法處理。這時需要繼承org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver做改寫setLocale的動作。代碼如下： 12345678910111213141516171819package model.data;import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;import java.util.Locale;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class NewAcceptHeaderLocaleResolver extends AcceptHeaderLocaleResolver { private Locale mylocal; public Locale resolveLocale(HttpServletRequest request){ return mylocal; } public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale){ mylocal = locale; }} 接著，需要在applicationContext的檔案中，多加個bean…. 1&lt;bean id=&quot;localeResolver&quot; class=&quot;model.data.NewAcceptHeaderLocaleResolver&quot; /&gt; 接下來就不會出現如之前所說的錯誤了。","link":"/2010/06/08/2010-06-08-spring2-and-velocity-implement-i18n/"},{"title":"[Quercus]在tomcat上跑php","text":"話說，因為研究了ZK，因為ZK是基於java上的framework，所以如果要使用的話，需跑在tomcat或resin之類的server上。 但是，如果zk想在其他的語言上使用，該怎麼辦？tomcat上只能跑Java嗎？ 其實在早期，一直以為大家都覺得tomcat上只能跑Java，只是後來當一些語言的出現，開始想要在JVM上跑其他的script language而試著不寫Java，於是，出現在很多其他的專案。比較有名氣的像是JRuby、Jython、Groovy、Scala… 只是，最後回頭來想就會有能不能在上頭跑PHP的想法出現？也許是個很瘋狂的想法，但是有了Quercus，就實現了。 「Quercus」是今天的主角。這個其實是另一個web container：Resin底下的一個project。主要是讓Resin上可以除了JSP/Servlet外可以跑PHP。在官方的網頁上建議是跑在Resin上…但是，我讓tomcat上也能玩。因為這個東西，主要是個jar檔。但是目前接下來會介紹的設定方法中大家可以嘗試，只是在實驗的時候，我沒碰到和tomcat有相衝或是問題的地方。請大家注意。 ###1. 下載### 先至 Quercus 網站上下載WAR檔。（我下載的是4.0.3版） ###2.複製檔案### 將WAR檔解開，把在WEB-INF/lib資料夾裡頭的「resin」、「inject-16」二個jar檔copy後，貼到自己的web app資料夾。例如自己的資料夾叫「fun」，則放到「fun/WEB-INF/lib」之中。 ###3. 設定web.xml檔### 將自己的web app資料夾（目前我們預設叫「fun」）中，在WEB-INF下有一個叫「web.xml」的檔案打開編輯。將以下的資訊放進web.xml之中： 接著進tomcat的管理介面，重新reload一次web app，就會生效了。 12345678910111213&lt;servlet&gt;&lt;servlet-name&gt;Quercus Servlet&lt;/servlet-name&gt;&lt;servlet-class&gt;com.caucho.quercus.servlet.QuercusServlet&lt;/servlet-class&gt;&lt;init-param&gt;&lt;param-name&gt;license-directory&lt;/param-name&gt;&lt;param-value&gt;WEB-INF/licenses&lt;/param-value&gt;&lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;Quercus Servlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.php&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 此時只要開始寫php，就可以看的到正確的跑在眼前了XD","link":"/2010/01/19/2010-01-19-run-php-on-tomcat/"},{"title":"[php]zend framework 入門 I","text":"Orz…又是看到一直忘記要記下來的筆記….. 因為工作需要，開始碰zend……入門就要寫簡單上手，然後，接下來開始剖析一下(謎：好像還沒真的寫到進階的文章ㄟOrz…) 接下來的內容將會利用Zend Framework 1.10.6來建立一個簡易的網站，一邊看教學文件為Tutorial: Getting Started with Zend Framework 1.10 by Rob Allen，並且一邊註解筆記。 接下來的內容將會利用Zend Framework 1.10.6來建立一個簡易的網站。 基本需求： PHP 5.2.4以上 apache 需要支援mod_rewrite 另外，需要將http.conf中的設定AllowOverride None改成AllowOverride All。而且還需要先設定讓apache可以使用.htaccess檔案進行設定。然後，先來下載zend framework。當下載後，會看到是一個壓縮的檔案(zip或tar.gz)。 接下來，現在就先來設定zend tool….. 其實照著教學說明中，是將剛下載回來的zend framework解壓縮後，放置在在C:Program FilesZendFrameworkCli 的資料夾之中。解開後放到ZendFrameworkCli的資料夾中，會有一個叫bin的資料夾。將這個資料夾的路徑，加到環境變數的PATH之中。正確加好後，打開command line直接打上「zf show version」後按下enter，會看到在畫面中出現所下載的zend framework的版本。 在這分教學中，主要是帶領初心者製作一個可以編輯管理的CD列表。畫面上需要的，就是主畫面、編輯、刪除、新增三個部分。主畫面用來列出所有CD列表並且提供可以進行新增、修改、刪除的連結功能。所以現在我們會開始建立一個專案。利用以下的指令： 1zf create project 專案名稱(資料夾名稱) 所以我們的專案叫zf-tutorial的時候，指令就是如下下法： 1zf create project zf-tutorial 當按下enter後，會看到zend framework把產生了些資料夾結構和一些檔案。其中在public資料夾中，也會含有所產生的.htaccess檔案。所產生的結構如下： (有MVC結構) 其中在資料夾中會包含的檔案如下： 在以上結構中，可以發現，如果將zend framework解開放置後，其實會讓用戶連進來的時候，網址會如同：http://localhost/zf-tutorial/public/ 才能看的到這個project底下的網頁。所以，其實可以透過將apache的httpd.conf修改，讓根目錄直接指向public資料夾，就不需要還要在網址中特意指定到public才看的到網頁。如http://127.0.0.1/ 就可以看的到了(其實就是設定一個virtual host)。修改方式如下： 1234DocumentRoot d:/WEB/wwwroot/zf-tutorial/public/ServerName zf-tutorial.localhostAllowOverride All 改完後請記得重新啟動apache即生效。待重新啟動後，直接打上http://127.0.0.1後，就會看到在d:/WEB/wwwroot/zf-tutorial/public/ 了。在目前最後，需要再將剛下載解開後的zend framework之中的library/Zend的資料夾複製一份後，放到zf-tutorial/library/之中。這樣就安裝完成了。可以直接在http://127.0.0.1/ 之中看到zend framework的畫面….在zend framework之中，首先要先了解到一個東西：Bootstrap在zend framework中使用了front controller這個設計模式，在所有的request進來的時候，可以將其通過index.php設定基本參數設定，確保在每個環境設定都是一致的。而Bootstrap我們稱為引導文件(大陸譯詞)。其中，我們可以經由public/.htaccess設定一進入資料夾即執行public/index.php。在public/index.php之中，可以看的到在source code部分，有像是APPLICATION_PATH路徑以及APPLICATION_ENV用來定義application資料夾以及環境設定。 Zend_Application 通常是用來啟動和設定application/configs/application.ini。這個檔案是create project的時候自動產生的。另外，會看到一個叫application/Bootstrape.php，這裡頭的Bootstrape class是繼承library/Zend/Application/Bootstrap/Bootstrape.php的Zend_Application_Bootstrape_Bootstrape。而application.ini其實會存在application/configs的資料夾中，透過Zend_Config_Ini這個compoment存取。Zend_Config_Ini可以透過一個繼承的關係，去針對段落讀取處理。舉列： 1[staging: production] 這會出現在application.ini之中，在之下到下一個有這樣的段落前，會被Zend_Config_Ini做處理。而其中在「:」之前為段落為此段落的名稱。其後代表有繼承的段落名稱。在這行代表的意思是staging段落會繼承production的段落設定。目前如果在開發過程中需要做debug，請直接在public/.htaccess的第一行加入： 1SetEnv APPLICATION_ENV development 接下來要開始先來設定application.ini檔了。 設定application/configs/application.ini檔案其中的時區，請設定以下項目 1phpSettings.data.timezone = &quot;Asia/Taipei&quot; 其中”Asia/Taipei”請設定所在城市設定。基本上設定應該是和php.ini的timezone設定一樣。 ##URL的結構： 這邊需要先解說一下URL結構的部分。因為zend framework是web mvc(何謂web mvc，請見此連結)結構。在url rewrite的時候有一些和一般不同的判讀： ex. http://localhost/zf-tutorial/public/news/view 在這樣的URL路徑中，public底下主要是我們會連結到的部分。而news其實是Controller，而View為為Controller之中的Action(在controller之中的method)。預設為index的部分則不會直接顯示在url之中。 ##正式實作： 在根據教學pdf中，會實作四個畫面。分別是home、add、update、delete功能。並且利用IndexController外加四個Action(將寫在IndexController之中)實作簡單的管理CD功能。 先來解說Controller的部分。一般Controller都是放在application/controllers的資料夾。命名方式為：「{名稱}Controller.php」其中Controller一定要寫，並且C要大寫。前頭加上命名名稱。而Action的部分，其實是小寫字母外加上Action為一個method。例如，已新增的Controller之中，會看到像是「addAction」為一個method的名稱。接下來，先來新增add、update、delete三個Action在indexController之中： 指令如下： 12345zf create action add Indexzf create action update Indexzf create action delete Index 我們拿「zf create action add Index」來解釋其中意思代表 要zf建立一個action為Add的Action，並且是加在Index的Controller之中。(記得大小寫需一致)接著，在URL上的顯示，就會變成為：http://localhost/zf-tutorial/public/Index/add 所以，在執行的時候，就會去執行IndexController的addAction這個method了。","link":"/2010/07/19/2010-07-19-phpzend-framework-getting-started-i/"},{"title":"[php]zend framework 入門 II","text":"在前一篇寫到建立Action的部分，在這篇將會繼續利用Zend Framework 1.10.6來建立一個簡易的網站，一邊看教學文件為Tutorial: Getting Started with Zend Framework 1.10 by Rob Allen，並且一邊註解筆記。 資料庫處理部分： 我們將會使用Zend_Db_Table來處理有關資料庫資料的add、update、delete功能。不過首先，請先打開application/configs/application.ini，並且找到[production]的段落，進行修改資料庫連結設定： 12345resources.db.adapter = PDO_MYSQLresources.db.params.host = localhostresources.db.params.username = dbnameresources.db.params.password = dbpasswordresources.db.params.dbname = zf-tutorial 這些設定是在設定跟資料庫相關的部分。包含帳號密碼以及資料庫名稱、host、db adapter。然後，需要先在mysql之中，建立一個table 123456CREATE TABLE albums (id int(11) NOT NULL auto_increment,artist varchar(100) NOT NULL,title varchar(100) NOT NULL,PRIMARY KEY (id)); 並且加入些假資料 Model部分：建立model的部分，需要先繼承Zend_Db_Table和Zend_Db_Table_Row來處理。在Zend Framwork是使用了Table Data Gateway設計模式來處理。而在class的命名上，例如：Application_Model_DbTable_Album 這個class，其實事實在是存放在application/model/DbTable/的Album.php。在教學中，需要先建立一個Model為Application_Model_DbTable_Album的class…接下來加上這幾個method： 1234567891011121314151617181920fetchRow(&quot;id = &quot;.$id); if(!$row){ throw new Exception(&quot;could not find row &quot;.$id); } return $row-&gt;toArray();}public function addAlbum($artist, $title){ $data = array('artist'=&gt;$artist, 'title'=&gt;$title); $this-&gt;insert($data);}public function updateAlbum($id, $artist, $title){ $data = array('artist'=&gt;$artist, 'title'=&gt;$title); $this-&gt;update($data, 'id = '.(int)$id);}public function deleteAlbum($id){ $this-&gt;delete('id = '.(int)$id);} Layouts與views：layout可以在指令中指定打開使用layouts。指令為： 1zf enable layout 這樣將會自動的建立application/layouts/scripts/layout.phtml (注意，是phtml沒錯)。並且會自動更新application.ini設定預設的layout資料夾的路徑。在layout.phtml設定的東西即可以共同使用。另外，記得css和javascript檔案仍要放在public底下才會有作用。 另外首頁樣板的位置是放在application/views/scripts/index/index.phtml Action:預設在index中會跑indexAction這個method.add處理的地方在addAction，以此類推。所以處理add、edit、delete都在其所屬的Action中處理以及做驗證。並且記得將最後導回頁面。當這步寫完後，需要去頁面上(該pthml的view)加入 1echo $this-&gt;form; 這樣才會把在Action中要顯示的form秀在view上頭 基本的CURD大概就是這樣處理。其餘的就待再接觸多點後再來記錄。","link":"/2010/07/23/2010-07-23-phpzend-framework-getting-started-2/"},{"title":"[jQuery]jQuery Gride 使用整理","text":"工作整理，在本文中會使用jQuery Grid的使用以及使用jQuery UI還有幾個需要注意的事項。 使用版本： jQuery Grid：3.7.2版 下載 (其實下載後，裡頭會有jQuery 1.4.2。在下載選擇的時候，因為是各模組選擇下載，但是Grid base請「務必」一定要勾選。在本次手作時，我是全勾選下載。) jQuery：1.4.2版 下載 Zend Framework：1.10.7版 使用步驟： STEP 1. 設定 首先，先用Zend Framework建立一個專案（本範例中名稱為：test）。然後，建立一個Controller為TableController，並且先建立一個TableController使用的view。（位置於application/views/table/index.phtml 此頁為TableController的indexAction預設會讀取的頁面）。設定好後，接下來正式進入使用設定jQuery Grid的步驟： ###1. 加入html至template 在使用jQuery Grid的時候，需要先利用html設定好以及各一組，主要是讓jQuery Grid將產生出來的表格可以產生在中，而分頁的功能部分會放在之中。 12&lt;table id=&quot;listTable&quot;&gt;&lt;/table&gt;&lt;div id=&quot;pager&quot;&gt;&lt;/div&gt; 在這段html中，目前先設定table元件的id為listTable，而div元件的id為pager，等一下jQuery Grid設定好後，就會把物件放進去了XD ###2. 加入jQuery library jQuery Grid需要搭配jQuery來使用。另外，因為jQueryGrid有支援jQuery UI themeRoller，所以我也把這個加進去，讓畫面比較好看點： 123456789101112131415161718192021222324252627&lt;!– 這行表示加入jQuery Grid的樣式CSS，有一些部分在加入繁中後會有需要調整的地方，在文章後將會再處理 –&gt;&lt;?php echo $this-&gt;headLink()-&gt;setStylesheet(‘/js/datagrid/css/ui.jqgrid.css’, ‘screen’, array()); ?&gt;&lt;!– 這行表示加入jQuery UI themeRoller的sunny的CSS樣式 –&gt;&lt;?php echo $this-&gt;headLink()-&gt;setStylesheet(‘/js/theme/css/sunny/jquery-ui-1.8.4.custom.css’, ‘screen’, array()); ?&gt;&lt;!– 這行表示加入jQuery library –&gt;&lt;?php echo $this-&gt;headScript()-&gt;setFile(‘/js/datatables/media/js/jquery.js’, $type=’text/javascript’, $attrs=array()); ?&gt;&lt;!– 這行表示加入jQuery UI的javascript –&gt;&lt;?php echo $this-&gt;headScript()-&gt;setFile(‘/js/theme/js/jquery-ui-1.8.4.custom.min.js’, $type=’text/javascript’, $attrs=array()); ?&gt;&lt;!– 這行表示加入繁體中文語系顯示 –&gt;&lt;?php echo $this-&gt;headScript()-&gt;setFile(‘/js/datagrid/js/i18n/grid.locale-zh_tw.js’, $type=’text/javascript’, $attrs=array()); ?&gt;&lt;!– 這行表示加入jQuery Grid主要的javascript –&gt;&lt;?php echo $this-&gt;headScript()-&gt;setFile(‘/js/datagrid/js/jquery.jqGrid.min.js’, $type=‘text/javascript’, $attrs=array()); ?&gt;&lt;!– 實作的javascript –&gt;&lt;?php echo $this-&gt;headScript()-&gt;setFile(‘/js/dtable.js’, $type=‘text/javascript’, $attrs=array()); ?&gt;&lt;/head&gt;&lt;body&gt;&lt;table id=&quot;listTable&quot;&gt;&lt;/table&gt;&lt;div id=&quot;pager&quot;&gt;&lt;/div&gt;&lt;/body&gt; 注意事項：在jQury Grid的wiki中指出可以使用所附的grid.loader.js做include javascript的動作，就不用在html中加這麼多的文字。在使用前，請先更改該檔案中第四行的「pathtojsfiles」變數，更改成您要加入的javascript的路徑。 ###3. 將語系改成繁體中文 因為jQuery Grid所附的i18n的library之中，語系沒有繁體中文，所以需要做一點小處理： (1). 複製一份在i18n底下的grid.locale-語系代碼.js的檔案在i18n資料夾下，並且將檔案名稱改成：grid.locale-zh_tw.js (為了方便翻譯，我直接複製了grid.locale-cn.js這個檔案，因為這個是簡中的語系檔，直接翻譯比較快。) (2). 打開grid.locale-zh_tw.js後，直接會看到有簡中文字的部分，直接修改翻譯成需要的文字後，只要存檔後就可以使用。 ###4. initial jQuery Grid jQuery Grid資料表切成幾個部分…. jQuery Grid解說 - 圖片frome http://www.trirand.com/jqgridwiki/ 照上圖來看，整個data table會分成四個部分。其中標題的地方是叫「Caption Layer」，每個欄位標題的地方是叫Header Layer。而「body layer」的地方就是顯示資料的地方，而資料的來源是利用ajax向server-side要來的。在最下方Navigation Layer的地方其實就是跟分頁顯示有關係的區塊。而這區塊其實可以加入像是「新增、編輯、顯示資料、重新整理、搜尋」的功能按鍵，會出現在區塊的左邊。 接下來…我會打開dtable.js這個檔案，將Javascript寫在裡頭。(javascript不寫在html裡頭喔！) 1234567891011121314151617181920212223242526272829$(document).ready(function(){ //當一開始開啟文件ready之後就會直接執行$(&quot;#listTable&quot;).jqGrid({ //這行表示在 #listTable這個id的物件中會執行加入jQuery Grid的物件url: '/Table/table/format/json/', //這行url:的用意是在指定需要自那個url中撈出資料。可支援的資料有xml、json格式。datatype: 'json', //設定json為接收資料的格式，接收格式資料會在文章後說明mtype: 'GET', //設定取用資料方式為GET (也可用POST)colNames:['id', '名稱','連結','備註'], //設定欄位要顯示的標題名稱colModel :[ //從這邊開始要設定的就是跟欄位本身有關係的設定了.....{name:'id', index:'id', sortable: false}, //設定第一個欄位為id，並且index設成id為到時候ajax回server side連結時使用的parameter。並且設定為不可做排序。{name:'name', index:'name', width: 120}, //設定第二個欄位為name，並且設定寬度為120px。寬度沒設定的話，預設為150(值會再經jqGrid再運算過)[colModel屬性說明](http://www.trirand.com/jqgridwiki/doku.php?id=wiki:colmodel_options){name:'url', index:'url', align:'right'}, //設定url欄位，這邊是故意設定靠右對齊{name:'memo', index:'memo', sortable:false}],//注意：colNames和colModel的陣列大小要長的一樣，因為這是一對一欄位的設定。如果不一樣的話，在網頁載入時會出現javascript訊息告知你有問題後，jqGrid是沒有辦法呈現的。pager: '#pager', //設定分頁的位置是出現在id為pager的地方。就是在html中的&lt;div id=&quot;pager&quot;&gt;&lt;/div&gt;;rowNum: 5, //設定一開始單頁的筆數，這個欄位值不設定時，預設為一頁20筆。rowList:[5,10,20], //設定下拉設定一頁顯示筆數，設定採陣列方式，預設空陣列時，畫面上不會出現可設定的下拉選單。sortname: 'id', //可以設定一開始載入資料時要使用那個欄位來排序，server-side部分要記得接受名稱為「sortname」的變數名稱來處理sortorder: 'asc', //可以設定一開始載入資料時要使用那種排序方式，server-side部分要記得接受變數名稱為「sortorder」的值來處理。caption: '===============Grid', //設定table的標題名稱，如果不設定的話，則不會出現table title的部分。jsonReader : { //此段為設定讀取json的時候該讀那個indexroot: &quot;rows&quot;, //設定資料欄位陣列是放置在rows這個index之中。page: &quot;page&quot;, //設定目前是第幾頁total: &quot;total&quot;, //設定總共有幾頁cell: &quot;cell&quot;, //設定標示每列資料是放在一個叫cell的index之中。有試過是否可以不設，但是發現資料會顯示不出來。}} ).navGrid('#pager',{view:true, del:false, edit: false}) //navGrid在這邊的設定是有關於分頁上一些功能導覽的部分。目前範例裡的設定只有設定有顯示，但是不要出現刪除、編輯這二個功能。所以畫面上會出現搜尋以及顯示整筆資料的功能....}); 接下來是json的格式說明，有關xml的部分請見連結： 12345678910{&quot;total&quot;: &quot;3″, //這是告訴jqGrid共全部共有幾頁&quot;page&quot;: &quot;1″, //這是告訴jqGrid目前在第幾頁&quot;records&quot;: &quot;13″, //這是告訴jqGrid總共筆數有多少。有的時候自訂navGrid的時候可以顯示出來。//接下來是資料列的位部分，顯示資料只要照欄位順列一列一列塞進陣列就可以了&quot;rows&quot; : [{&quot;cell&quot;: [&quot;1&quot;, &quot;test1&quot;, &quot;http://www.yahoo.com.tw&quot;, &quot;testmemo&quot;]},{&quot;cell&quot;: [&quot;2&quot;, &quot;test2&quot;, &quot;http://www.yahoo.com.tw&quot;, &quot;test2memo&quot;]},{&quot;cell&quot;: [&quot;3&quot;, &quot;abc&quot;, &quot;http://www.yam.com.tw&quot;, &quot;test12345&quot;]},{&quot;cell&quot;: [&quot;4&quot;, &quot;777&quot;, &quot;http://heheh&quot;, &quot;adfadfaklj&quot;]},{&quot;cell&quot;: [&quot;5&quot;, &quot;check name&quot;, &quot;adf;lkajdsfklajdf&quot;, &quot;memo&quot;]} ]} 只要在server-side在接收jqGrid的request的時候，產生出這樣格式的json檔案，其實就會將資料顯示上去了。如果json格式出現問題，不見得會出現javascript錯誤，這點要特別注意。為了這個問題，多花了不少debug的時間在上頭…. Orz 接下來要做的事，就是調整一下CSS ###5. 調整CSS 因為自訂繁體中文語系後，會發現一個問題，就是在navigation layer還有header layer的地方，因為高度的問題，字的顯示會很像被切掉一些。為了正確顯示，還是需要解決一下這個問題….. (1) 打開css/ui.jqgrid.css檔案 (2) header layer的高度，請直接搜尋找到「.ui-jqgrid .ui-jqgrid-htable th div」的CSS，將height的值改大。 (3) navigation layer的地方，每頁筆數的部分可以修改「ui-pg-selbox」的CSS，將height改大一點，比較不會看起來像字被壓在底下。另外就是可以直接鍵入頁數來切換頁面的輸入框，可以修改「ui-pg-input」的CSS將height改大一點，字也不會看起來像被切一半。 這樣就大致大功告成了。如果有需要修改的可以再繼續處理。 ###總結： 其實jqGrid基本的功能是顯示資料，另外有其他的功能是需要另外再加掛jqGrid Plugin才能運作。所以其實在使用的時候，官方wiki一開始會先註明是否需要再加其他的plugin的javascript檔，例如：Multi-search (但是這個我一直試不出來，不知道那邊有問題).. 在設定前請記得一定要先看一下jqGrid wiki的說明","link":"/2010/08/19/2010-08-19-jquery-gride/"},{"title":"[capistrano]capistrano心得筆記","text":"這是deployment的工具，而且是ruby的。另有Vlad，也是ruby的deploy工具。 ##一、安裝： ruby (目前我用v1.8) gem tool 再用gem tool安裝capistrano 123 1. gem sources -a http://gems.github.com/ #(加source)2. gem install capistrano 安裝成功時，可以在command line下直接使用cap指令 ##二、開始使用 新建專案後，先進入專案資料夾，接著輸入 1capify . 執行後會在rails的資料夾中產生以下二個檔案 12./config/deploy.rb./Capfile 這樣就可以開始改deploy.rb了！ 心得重點：設定資料需寫在deploy.rb之中，執行的動作也以ruby寫出。 基本執行的時候，會直接將deploy.rb設定的資料直接做處理動作。 執行cap deploy的時候，其deploy不是指檔案名稱，是deploy預設的動作。這個不會出現在deploy.rb的設定中。但可以利用撰寫同名的namespace來設定想要動作的任務。 執行設定主機有localhost會有問題，因為是遠端佈署用工具。都是利用ssh之類做操作。 在執行前，需要先remote server的public key，在做ssh 的時候會比較方便些。 直接在deploy.rb中寫好密碼，密碼有出現符號的部分，最好前、後加上跳脫符號，系統才會認得。 可以自行寫task進行執行，方法如下： 1234desc &quot;check out project&quot;task :check_out_project do puts &quot;check out project&quot;end 在desc 後，寫下task的名稱(只是標示用)，然後task後寫出這個task的名稱，但是這個名稱是到時候執行的時候會認的參數，如上述的程式碼，要執行這段task時，在提示符號下，就需要打上：cap check_out_project 這樣才會執行在這個task撰寫的動作。(上述程式碼上，就會印出check out project)。 如果需要出現二個namespace的區塊，用來放置不同動作分類task時，範例如下： 123456789101112131415161718192021namespace :checkout do task :default, :roles =&gt; :web do puts &quot;check default&quot; checkout.callbackup end task :callbackup do backup.default endendnamespace :backup do task :default, :roles =&gt; :web do puts &quot;backup default&quot; end task :backup_project do puts &quot;backup project&quot; endendafter(:checkout, &quot;backup:backup_project&quot;) 這樣可以在提示字元下，另用參數來切換要使用那一個指令，如： 12cap checkout:default #這個代表用來執行在checkout這個namespace之中default的taskcap backup:default #這個代表用來執行在backup這個namespace之中default的task 此外，task可以跨task、namespace呼叫，方法就是在task之中，依上述範例，可寫下如「back.default」，這代表呼叫backup這個namespace中的default這個task。而同namespace的其他task呼叫，依上述範例，在checkout的default這個task之中，只要寫下如「checkout.callbackup」，這代表呼叫checkout的callbackup這個task。 當程式出現了after()這個function時，這代表可以指定那個namespace的task只要執行完之後，就會去執行指定的另個task。如after(:checkout, “backup:backup_project”) 的意思是，當執行了checkout這個namespace之中的task之後，就會去執行backup這個namespace之中的backup_project這個task。 after(“deploy”, “backup:backup_project”)可以指定如果使用deploy的時候，在執行後會去跑backup這個namespace的backup_project這個task，不過在實作中，deploy需要用namespace再撰寫一次，指定在deploy時會處理的動作。這樣在執行cap deploy的時候，才會在執行後觸發backup的backup_project。 在task之中如果想下系統指令： 1run &quot;ls&quot; 只要如上述將指令寫在run 的後面就可以了。這個執行是執行server上的執令 設定變數在capistrano中，只要設定好參數，即可帶參數在task之中出現，如：set :username, ‘myName’然後，在task程式如下撰寫： 123task :default puts &quot;hello #{username}&quot;end 在執行這個task的時候，就會印出hello myName(#{變數名稱} 會替換成所設定的變數的值) 想在deploy中分開production、stagging環境：在deploy.rb中，只需要寫： 1234567891011task :production do set :deploy_to, &quot;/u/apps/#{application}-production/&quot; set :deploy_via, :remote_cache after('deploy:symlink', 'cache:clear')endtask :staging do set :deploy_to, &quot;/u/apps/#{application}-staging/&quot; set :deploy_via, :copy after('deploy:symlink', 'cruise_control:build')end 在下指令的時候，只需要像 12cap production deploycap staging deploy 就可以分環境進行任務。 而capistrano針對php做deploy的作法： 進入專案資料夾後，直接執行： 1capify . 然後，在專案資料夾下，會產生一個叫Capfile的檔案，還有在config資料夾裡有一個deploy.rb的檔案。 只要編輯好deploy.rb這個檔案即可以進行動作。","link":"/2011/02/21/2011-02-21-about-capistrano/"},{"title":"[zend frameowrk]將jQuery plugin - multiselect2side 整合zend_formintegration","text":"controller之中加入zend_form 1234567891011121314151617 &lt;?php$form = new Zend_Form(); $form-&gt;addElement(new Zend_Form_Element_Multiselect('demo1', array('multiOptions' =&gt; array( '1' =&gt; '選項一', '2' =&gt; '選項二', '3' =&gt; '選項三', '4' =&gt; '選項四', '5' =&gt; '選項五', '6' =&gt; '選項六', '7' =&gt; '選項七', '8' =&gt; '選項八', ) ))); $this-&gt;view-&gt;assign('form', $form);?&gt; 在Zend_Form_Element_Multiselect中設定這個項目的名稱(id)為demo1時，其實在html中，就會發現id=”demo1″這樣的屬性。所以，在js實作的時候，只需要 1$(&quot;#demo1″).multiselect2side(); 就會直接套上了。其他一些選項的部分，只需要直接在function中設定即可，如下： 12345$(&quot;#demo2″).multiselect2side({ moveOptions: false,}); 上例的程式中，選項當moveOptions設定為false的時候，會將排序的選項功能整個拿掉。","link":"/2011/02/21/2011-02-21-integration-zend-form-and-jquery-plugin-multiselect2side/"},{"title":"[vlad] vlad心得筆記","text":"號稱跟capistrano很像，但是較不複雜。 ##安裝： ruby (目前我用v1.8) gem tool 安裝必要套件：Rakeopen4hoerubyforge 再用gem tool安裝vlad 12 gem install vlad ##操作： ###一、新增一個專案的時候，需要先更改一下Rakefile，新增以下二行： 123 require ‘vlad’Vlad.load ###二、修改config/deploy.rb將需要設定的變數設定進去~ 如： 12345678 set :application, &quot;project2″set :user, &quot;doris&quot;set :domain, &quot;192.168.1.104″set :deploy_to, &quot;/home/doris/Documents/project2/&quot;set :repository, &quot;http://info.wahaha.com/svn/project/trunk/&quot;set :svn_cmd, ‘svn –username username –password &quot;password&quot;‘ ###三、執行安裝時，直接輸入： 12 rake vlad:setup vlad:update (第一次需要這樣執行) 就會進行新專案佈署。其中，vlad:setup只是將server上新建folder，並且長的跟repository的一樣。所以要做vlad:update檔案才會寫進去。 執行multi-task的時候： ####1. multi-task寫法如下： 1234 task :dep do puts &quot;abc&quot;end 執行的時候，語法如下： 12 rake dep 就會直接執行task為dep這個task ####2. 執行rake vlad:setup beta 會執行預設的setup後，直接再執行beta這個task ####3. 執行一個task後，要去執行第二個taskexample: 12345678910 task :task1 do puts &quot;hello&quot;endtask :task2 do puts &quot;do this&quot;endtask :task1 =&gt; :task2 當執行了rake task1之後，會先執行dodo這個task2後，才會執行task1。 ####4. multi-config和capistrano一樣，需要設定，以task分成production以及dev，範例如下： 1234567891011 task :productionset :deploy_to, &quot;/home/doris/Documents/project&quot;puts &quot;#{deploy_to}&quot;endtask :devset :deploy_to, &quot;/home/doris/Documents/dev&quot;puts &quot;#{deploy_to}&quot;end 這樣執行rake production的時候，會去執行production的設定，而會印出production的deploy_to的位置。#{變數名稱} 可是用來印出變數用 ####5. 似乎是不能像capistrano有跨task呼叫的功能。 ####6. default預設就是用svn ####7. 也可用capistrano的run來執行command line指令 ####8. 進行update請用rake vlad:update，要做rollback請用rake vlad:rollback 和Capistrano不同的地方:程式進行update(vlad:update)、restart、進行資料庫更新(vlad:migrate)、伺服器啟動(vlad:start)都以執令執行。 deploy.rb直接建立檔案處理，capistrano利用指令建立deploy.rb以及產生capfile處理。Vlad從此看的出來需要倚靠Rake做deploy的動作。 部分deploy.rb的變數不太一樣。 vlad沒有after、before這二個function，因為是用rake php做deployment: copy rails專案中的Rakefile到目前專案的位置 以及configs底下的boot.rb、environment.rb到專案的configs底下。 新建deploy.rb進行建置任務的動作 vlad可使用的變數可看這邊","link":"/2011/02/22/2011-02-22-about-vlad/"},{"title":"[redmin]架設redmin (使用mysql)","text":"基於工作上研究需要，所以架設redmine，redmine是以Ruby寫的一個專案管理軟體。 架設時參考了二篇文章： Tsung’s Blog: 將 Redmine 安裝於 Debian、Ubuntu Linux ㄚ凱隨手紀： Ubuntu 10.04 安裝 Redmine 基本上，目前架設環境是放在Ubuntu 10.10之中，因為套件工具有提供，所以就直接安裝了，步驟如下： 12 sudo apt-get install mysql redmine redmine-mysql apache2 git-core subversion libapache2-mod-fcgid libapache2-mod-passenger 因為安裝的時候需要用mysql，所以就使用了redmine-mysql，如果想用sqlite也可以使用redmine-sqlite。也可以查看官方網站有支援的其他資料庫。 接下來，安裝好後，還要再設定一下，因為希望把redmine出現在ex. http://localhost/redmine 這樣 12 sudo ln -s /usr/share/redmine/public/ /var/www/redmine 然後，還是需要設定一下，要編輯 /etc/apache2/site-enabled/000-default 這個檔案，加入： 123 RailsEnv productionRailsBaseURI /redmine 接下來把apache記得reload，應該就可以看的到redmine的畫面了。一進去有預設帳密為admin，記得需要先行修改","link":"/2011/03/18/2011-03-18-redmin-install-using-mysql/"},{"title":"[Ant] apache Ant入門","text":"這個算是早該寫出來的文章債….. 畢竟要趁還沒忘記第二次的時候快生出來才對。不過這篇會和另一篇phing內容很像(說明幾乎是一樣吧？！)… 只是phing會外加有svn的部分。 以下教學不含直接使用ant的java class做些處理。純以入門直接使用撰寫build.xml基本操作。入門簡單，但操作在個人。應用就不難了。有人會問說apache ant到底是在做什麼用的。話說，Ant其實是一個java的command line工具。這個工具是方便你能完成所指定的工作。Ant是用java撰寫的一個工具。其實有用過php的phing的話，馬上就會覺得這麼這麼熟悉。不過我是先會Ant再學習phing，所以感覺剛好反過來XDDD 。說真的，這麼好用的工具，怎麼能不會呢？以下我就用ant的方式大概簡要解說一次….. ##一、安裝需安裝JRE/JDK才能使用。下載回來後，直接解開後，即可使用。指令使用為ant，放在ant資料夾下的bin底下。可以直接設成可以直接下ant指令較為方便….. ##二、使用 ######1. 執行 (1) 先建立一個檔案叫做build.xml (請記得使用utf-8為編碼) 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;antProject&quot; default=&quot;create&quot;&gt; &lt;property name=&quot;targetFolder&quot; value=&quot;project&quot; /&gt; &lt;target name=&quot;create&quot;&gt; &lt;echo&gt;starting prepare ${ant.project.name} folder&lt;/echo&gt; &lt;/target&gt; &lt;target name=&quot;deploy&quot;&gt; &lt;echo&gt;continue to deploy to ${targetFolder}&lt;/echo&gt; &lt;/target&gt;&lt;/project&gt; (2) 執行預設target： 12 ant (直接enter) (3). 如果要執行deploy這個target時： 1phing deploy (直接enter) ######2. 入門說明 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;antProject&quot; default=&quot;create&quot;&gt; &lt;property name=&quot;targetFolder&quot; value=&quot;project&quot; /&gt; &lt;target name=&quot;prepare&quot;&gt; &lt;echo&gt;depend action&lt;/echo&gt; &lt;/target&gt; &lt;target name=&quot;create&quot; depends=&quot;prepare&quot;&gt; &lt;echo&gt;starting prepare ${ant.project.name} folder&lt;/echo&gt; &lt;/target&gt; &lt;target name=&quot;deploy&quot; depends=&quot;create, prepare&quot;&gt; &lt;echo&gt;continue to deploy to ${targetFolder}&lt;/echo&gt; &lt;/target&gt;&lt;/project&gt; 在project這個tag中包含起來，顯示為這個專案相關的屬性。也代表這個目前要處理的專案。設定一下name辨示專案名稱為何。然後設定好default屬性，這個default代表的是預設Ant執行時，預設會跑的target。 另外，project中會包含幾個target的tag，這些target的tag裡頭是設定任務要達成的一些動作。設定target的name屬性是指任務的名稱，在執行的時候，可以指定執行要跑那個target。在這個範例中，可以看的到有寫了二個target，一個叫做create，另一個叫deploy。在create這個target之中，可以看到，是用echo這個tag，印出訊息。所以在執行create這個 target的時候，會在畫面中顯示出「開始準備antProject專案建立預備folder」。 在${}符號中間帶想顯示的變數，會顯示出所設定的值。像在create這個target中出現的${ant.project.name}代表會顯示在Ant中，project這個tag之中name的屬性。所以在這個範例中，就會顯示出「antProject」這個值。這是第一種變數的寫法。另一種，請看deploy這個target。在這個target之中，有看到${targetFolder}這個變數，這個顯示是設定要顯示在這個範例中 設定的值。而targetFolder其實就是property這個tag中的name。這是另一種可以設定變數的方法。在create這個target之中，有看到一個屬性叫做「depends」，這個是設定在執行create這個target的時候，需要預先執行那一個target才可以執行。在文件語法上稱做「依賴」，就是指需要先執行完前置的作業後，最後才執行目前要執行的這個target。所以在create這個target之中，會先去執行prepare這個target才會執行create本身的動作。而depends是可以設定一個以上的target。在deploy的depends之中。 ######3. 使用外部properties檔案 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;phingProject&quot; default=&quot;getEnv&quot;&gt; &lt;target name=&quot;getEnv&quot;&gt; &lt;echo&gt;load properties files&lt;/echo&gt; &lt;property file=&quot;default.properties&quot; /&gt; &lt;echo&gt;ftp: ${ftp}&lt;/echo&gt; &lt;/target&gt;&lt;/project&gt; 在以上範例內容中，會發現在getEnv這個target之中，有個property的tag，設定為讀入default.properties這個檔案。default.properties內容如下： 12ftp = localhostdb = db.localhost 所以當執行getEnv這個target的時候，會讀入default.properties之中設定的屬性，並且在印出ftp位置的時候，會輸出localhost。更多apache ant支援的tag以及功能，可以參照說明。","link":"/2011/04/07/2011-04-07-apache-ant-tutorial/"},{"title":"[phing] phing 入門","text":"java上的apache ant搬到php上就是phing!功能一樣，但phing有更多支援：git、svn整體觀念一樣，只是支援tag會有不同，概念是一樣可以套到apache Ant上。 安裝：pear channel-discover pear.phing.infopear install phing/phing 執行方法： 先建立build.xml，以下為範例內容： 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;phingProject&quot; default=&quot;create&quot;&gt; &lt;property name=&quot;targetFolder&quot; value=&quot;project&quot; /&gt; &lt;target name=&quot;create&quot;&gt; &lt;echo msg=&quot;開始準備${phing.project.name}專案建立預備folder&quot; /&gt; &lt;/target&gt; &lt;target name=&quot;deploy&quot;&gt; &lt;echo msg=&quot;進行佈署到${targetFolder}資料夾&quot; /&gt; &lt;/target&gt;&lt;/project&gt; 執行預設target： 1phing (直接enter) 如果要執行deploy這個target時： 1phing deploy (直接enter) ###簡單入門： build.xml的結構基本長以下這個樣子： 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;phingProject&quot; default=&quot;create&quot;&gt; &lt;property name=&quot;targetFolder&quot; value=&quot;project&quot; /&gt; &lt;target name=&quot;prepare&quot;&gt; &lt;echo msg=&quot;顯示先動作&quot; /&gt; &lt;/target&gt; &lt;target name=&quot;create&quot; depends=&quot;prepare&quot;&gt; &lt;echo msg=&quot;開始準備${phing.project.name}專案建立預備folder&quot; /&gt; &lt;/target&gt; &lt;target name=&quot;deploy&quot; depends=&quot;create, prepare&quot;&gt; &lt;echo msg=&quot;進行佈署到${targetFolder}資料夾&quot; /&gt; &lt;/target&gt;&lt;/project&gt; 在project這個tag中包含起來，顯示為這個專案相關的屬性。也代表這個目前要處理的專案。設定一下name辨示專案名稱為何。然後設定好default屬性，這個default代表的是預設phing執行時，預設會跑的target。 另外，project中會包含幾個target的tag，這些target的tag裡頭是設定任務要達成的一些動作。設定target的name屬性是指任務的名稱，在執行的時候，可以指定執行要跑那個target。在這個範例中，可以看的到有寫了二個target，一個叫做create，另一個叫deploy。在create這個target之中，可以看到，是用echo這個tag，印出訊息。所以在執行create這個 target的時候，會在畫面中顯示出「開始準備phingProject專案建立預備folder」。 在${}符號中間帶想顯示的變數，會顯示出所設定的值。像在create這個target中出現的${phing.project.name}代表會顯示在phing中，project這個tag之中name的屬性。所以在這個範例中，就會顯示出「phingProject」這個值。這是第一種變數的寫法。另一種，請看deploy這個target。在這個target之中，有看到${targetFolder}這個變數，這個顯示是設定要顯示在這個範例中 設定的值。而targetFolder其實就是property這個tag中的name。這是另一種可以設定變數的方法。在create這個target之中，有看到一個屬性叫做「depends」，這個是設定在執行create這個target的時候，需要預先執行那一個target才可以執行。在文件語法上稱做「依賴」，就是指需要先執行完前置的作業後，最後才執行目前要執行的這個target。所以在create這個target之中，會先去執行prepare這個target才會執行create本身的動作。而depends是可以設定一個以上的target。在deploy的depends之中。 本身phing和ant一樣，可以由外部讀入.properties的檔案，直接將屬性及值寫在.properties之中。 作法： 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;phingProject&quot; default=&quot;getEnv&quot;&gt; &lt;target name=&quot;getEnv&quot;&gt; &lt;echo msg=&quot;讀入外部properties檔案&quot; /&gt; &lt;property file=&quot;default.properties&quot; /&gt; &lt;echo msg=&quot;ftp位置：${ftp}&quot; /&gt; &lt;/target&gt;&lt;/project&gt; 在以上範例內容中，會發現在getEnv這個target之中，有個property的tag，設定為讀入default.properties這個檔案。default.properties內容如下： 12ftp = localhostdb = db.localhost 所以當執行getEnv這個target的時候，會讀入default.properties之中設定的屬性，並且在印出ftp位置的時候，會輸出localhost。 ###svn 功能以及作法： 因為SVN tasks 需要依賴PEAR的VersionControl_SVN，所以需要先安裝這個才能順利執行。(目前安裝時，需安裝VersionControl_SVN-0.3.4，目前為alpha版stable) 先執行以下指令進行安裝： 1pear install VersionControl_SVN-0.3.4 接著，只需要在build.xml加上想做的svn動作即可： 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;phingProject&quot; default=&quot;svn-checkout&quot;&gt; &lt;property name=&quot;targetFolder&quot; value=&quot;project&quot; /&gt; &lt;target name=&quot;svn-checkout&quot;&gt; &lt;property file=&quot;default.properties&quot; /&gt; &lt;echo msg=&quot;讀入設定的properties檔&quot; /&gt; &lt;echo msg=&quot;svn位置：${svn.server}&quot; /&gt; &lt;echo msg=&quot;帳號：${svn.username}&quot; /&gt; &lt;echo msg=&quot;佈署位置：${deploy.path}&quot; /&gt; &lt;echo msg=&quot;開始進行佈署 ======================================&quot; /&gt; &lt;!-- 將project checkout下來 --&gt; &lt;svncheckout svnpath=&quot;/usr/bin/svn&quot; username=&quot;${svn.username}&quot; password=&quot;${svn.password}&quot; nocache=&quot;true&quot; repositoryurl=&quot;${svn.server}&quot; todir=&quot;${deploy.path}&quot; /&gt; &lt;/target&gt;&lt;/project&gt; 以上xml我將設定的屬性放在外部的default.properteis檔。這樣較好修改管理。目前這個範例是將project做checkout。所以只要設定好svncheckout，將屬性帶好，再來下phing執行，就會將project checkout到指定的地方。目前這個範例是在本機端做checkout，遠端可用scp task來處理。 實作commit的時候，需要有workingcopy才能執行。沒辦法在一開始執行的時候將程式新增專案到svn上。 本身phing支援的功能不少。相關tag可以直接看文件","link":"/2011/04/07/2011-04-07-phing-tutorial/"},{"title":"[php] php使用ssh連線","text":"本篇為使用php來建立ssh連線到其他電腦進行一般事務性的處理工作，不過目前ssh2連線支援需透過PECL安裝來支援。 做法如下： ####[準備環境] ubuntu 11.04 (這個是個人試驗時使用的環境) ####[架設] 1234apache2 php5-mysql libapache2-mod-php5 mysql-server php5 //本行純為架設LAMPapt-get install libssh2-1-dev libssh2-phppecl install ssh2 channel://pecl.php.net/ssh2-version/etc/init.d/apache2 restart //記得restart才會生效 註：ssh2-version意思是指要安裝如ssh2-0.11.2這樣的版本號因為前置需要先讓系統支援ssh2，所以一些前置的lib需要先行安裝，像libssh2-1-dev，以及讓php支援的libssh2-php這樣就做完基本就成功了！","link":"/2011/08/19/2011-08-19-let-apache-support-ssh/"},{"title":"rails 101 study","text":"一邊讀著xdite的rails 101一邊實作，並且將還記得的部分趕快做一下記錄。因為不常使用，超容易忘記的Orz 這樣一邊從rails中學ruby的辦法不知道是對的還是錯的，反正就努力學習囉…. XD rails on mac 安裝最佳實務在xdite的書中特別強調「絕對不要跳著裝！」。在此，我也請大家「真的不要跳著裝」因為真的會「很可怕」…. 我的安裝方法跟版本如下： #####系統版本： Mac OS 10.7 Ruby 1.8.7 (系統內建) #####方法如下： ######1. install Xcode 不管是剛用升級的到mac os 10.7還是乾淨安裝到mac os 10.7，請”一定要”再裝一次Xcode 4.1 ######2. install homebrew 123456ruby curl http://raw.github.com/gist/323731brew install gitbrew update ######3. install imageMagic /MySQL 1234567brew install imagemagickbrew install mysqlmysql_install_db –verbose –user=’whoami’ –basedir=&quot;$(brew –prefix mysql)&quot;cp &quot;C(brew –prefix mysql)&quot; /com.mysql.mysqld.plist ~/Library/LaunchAgents 注意：如果同時有裝像MAMP之類的軟體在寫其他語言，因為MAMP本身也有自帶mysql，所以可以在想使用brew 安裝的mysql時，再用mysql.server start即可。可以不用使用lunchctl load 來啟動mysql為一個deamon ######4. 裝RVM 123ruby curl -s http://rvm.beginerescueend.com/install/rvmsource ~/.profile 注意： 執行完安裝先注意一下/.profile中最後一行有沒有rvm寫入的訊息，如果沒有要照畫面上指示修改/.profile ######5. 安裝REE 123456789rvm install reervm ree –defaultbrew install readlinebrew link readlinervm –reconfigure –force -C –with-readline-dir=/usr/local install ree 注意：在mac os 10.7指令要如下執行: 1CC=/usr/bin/gcc-4.2 rvm install ree 然後接下來的rvm ree --default才會正常執行 ######6. 安裝gem 1gem install rails package list如下： mysql2 passenger nokogiri capistrano capistrano-ext delayed_job hoptoad_notifier facebooker2 factory_girl sphinx sqlite3 (多裝這個因為拿來做些其他的事) ######7. 安裝pow 1curl get.pow.cx|sh ######8. 使用powder 1gem install powder 在啟動、關啟pow的時候，因為pow是由routes欄截將rails server啟動的localhost:3000改為project.dev的domain name(相當於改hosts的效果)，如果想關閉pow的時候，預注意用powder status看一下是否有沒有關閉(啟動)…另一個狀況，在用powder關閉後好像會發現還是有作用，這時候進rails的專案資料夾，看一下tmp/pid有沒有東西。有的話，重新再開一次再關看看可能就ok了。","link":"/2011/09/12/2011-09-12-rails-101-study/"},{"title":"[coffeScript] coffee script 設定安裝","text":"因為開發平台是使用mac，所以設定的部分將以mac為準。 ###設定: #####環境： mac os 10.7.2 (Lion) homebrew 先安裝好 homebrew，homebew的安裝法可參考: ihower的設定方法 接下來，先來安裝Node.js 1brew install node 再來安裝npm (node package manager) 1curl http://npmjs.org/install.sh | sh 接下來安裝coffee script 1npm install -g coffee-script 將node_modules資料夾加到路徑之中 1export NODE_PATH=/usr/local/lib/node_modules 當設定完成之後，可以直接按下 1node 此時，會在畫面上看到進入了一個可以鍵入程式的環境，並且是以&gt;開頭的畫面。接下來只要鍵入： 1require('coffee-script') 如果出現了像以下的訊息 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677{ VERSION: '1.1.3', RESERVED: [ 'case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', '__hasProp', '__extends', '__slice', '__bind', '__indexOf', 'true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super', 'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when', 'and', 'or', 'is', 'isnt', 'not', 'yes', 'no', 'on', 'off' ], helpers: { starts: [Function], ends: [Function], compact: [Function], count: [Function], merge: [Function], extend: [Function], flatten: [Function], del: [Function], last: [Function] }, compile: [Function], tokens: [Function], nodes: [Function], run: [Function], eval: [Function] } 代表設定成功了。要退出目前的狀態只要Control C按個二下就行了。","link":"/2011/12/16/2011-12-16-coffee-script-learning/"},{"title":"[python] 在windows環境中設定python以及MySQLdb","text":"###一、下載安裝python:請先到http://python.org/getit/下載windows的installer(目前是使用python 2.7版) ###二、一直下一步安裝:預設安裝會將python2.7安裝在c:\\Python27的資料夾之中。在這個時候，windows上直接開始Dos模式後直接下 1c:\\python 會出現錯誤，因為這個時候系統並沒有將python認成是內部指令。 ###三、設定環境變數:在系統 / 進階 / 環境變數之中，加入以下變數設定： 1PATH = C:\\Python27 接下來重開一次Dos模式重新再下一次python指令後，應該會進入python的指令模式。這時候退出請下： 1exit() 基本的python環境就完成了。 ###四、安裝套件工具easy_install先到http://pypi.python.org/pypi/setuptools#files下載相對python版本的工具。因為之前筆者安裝的是python 2.7，所以在這邊我安裝了2.7版本的setuptools-0.6c11.win32-py2.7.exe檔。下載好後，直接點開一直按下一步安裝。除非預設的Python27的資料夾有變動，否則直接下一步安裝就可以完成了。當安裝完畢後，會在C:\\Python27\\Scripts這個資料夾下發現有easy_install的程式可以執行。 ###五、將easy_install加到環境變數之中因為安裝後還是不能直接在dos環境下直接下指令，所以，就手動把環境變數加進去。 1PATH = C:\\Python27\\Scripts ###六、安裝MySQLdb for Python:先到這個網址: http://www.codegood.com/archives/129下載讓python 2.7使用的檔案。下載好後，一樣直接點二下執行安裝。一樣一直按「下一步」安裝，就會安裝在預設的資料夾C:\\Python27之中。 (本文為32bit的安裝方式。64bit會需要更改機碼。) 這樣就完成了。","link":"/2011/12/19/2011-12-19-install-python-and-mysqldb-on-windows/"},{"title":"淺談有關網頁版面調整","text":"其實很多時候當網站完成之後，其實有的時候難免都會調整一下畫面，雖然有的時候只是畫面上多加一、二個字之類的，但還是希望能夠維持和原先一樣的畫面。但是其實很多時候，沒有注意到這可能會影響到整個畫面的呈現。我們以下就來實例探討為什麼會發生這樣的事情…. ###引言 - 為什麼要相容其他的瀏覽器？從這邊開始，需要先來說一個故事….很久很久以前，有一個組織叫做W3C…他們將目前我們看的到的網頁呈現的html完整的將規格訂立出來，再由各家瀏覽器(Windows上的Internet Exploer就是IE、Firefox火狐、Opera、等等)把這些html語法轉換成畫面讓大家看到目前網頁看的到的樣子。如下圖： (圖片中各瀏覽器logo版權屬各家瀏覽器公司..) 當各家瀏覽器開始將轉換畫面的部分開始實作的時候，有些總是會難免加入自己覺得不錯的功能…。而這個在早期發展瀏覽器的時候，基本上都幾乎是獨佔的情況下，看起來似乎是沒有這麼大的問題。但是就在Firefox、Chrom(google瀏覽器)開始出現的時候變的不太一樣了。很多的使用者開始轉向使用Firefox、Chrom來瀏覽網頁，接著，很多使用者開始發現了很多的畫面變的很可怕的問題出現了。「畫面變得和原來長的不一樣」這類的反應就出現了. 所以，其實在後來的設計師們在處理網頁的時候，就變成必需要盡量的去讓這幾個瀏覽器顯示出來的頁面長相一致。加上，其實早期最流行的IE6，IE6當初就是出現在瀏覽器幾乎是一家獨大的時代，雖然取代了當時最流行的Netscape Navigator瀏覽器，而後來成為了windows xp預設出廠的瀏覽器後，都是使用者長期的最愛。但這個問題就出現在其實IE6本身除了有實作W3C的規格之外，又自身加了不少東西。結果偏離了規格，也因為目前html的成長更新中，一直跟不上腳步。雖然後續微軟(Microsoft)有再將瀏覽器IE推出新版本如IE7以及IE8，都是為了回歸W3C的規格，但長期系統開發在一開始撰寫的時候因為依賴IE6的情況下，更新後卻沒辦法正常運作，導致了很多問題發生。最後，連微軟(Miscrosoft)自己都不得已跳出來請大家放棄使用IE6，還製作了一個IE6countdown的網站 有了前一段的說明，接下來就可以來解釋為什麼有的時候連加個字版面都會不一樣？基於前一段的故事，多少已經有人發現了一個殘酷的事實….就是…..「這樣設計師不就做一次，起碼要測上六個瀏覽器(IE6, 7, 8, Firefox, Chrom, safari，有的人測到七個，第七個是小有名氣的Opera歌劇院瀏覽器…)」是的。絕對沒有看錯。這真的是事實….. ###解說 #####假設有一個html的版面，長的樣子如下： #####需求需要將圖中logo右邊有一個歡迎訊息：「您好, 歡迎來到xxxxxxxx X網站.」的加入二個中文字，變成「您好，歡迎來到xxxxxxxx 這是一網站.」 #####問題在畫面上看起來，其實感覺將需求一下就可以完成。而其實也只是二個字而已。但開始動的時候就發現問題來了…..在IE6上，可以正常的顯示。如下圖： 但是同樣的畫面在Firefox、Chrom、IE8會變成下圖的樣子： 這個時候，總是會發現，怎麼會有這種情況？這到底是發生什麼事？又不想把字體縮小，因為如果這個文字再縮下就到8px的話，其實如果是Mac的使用者看到會發現小到很難看的清楚。但是，不縮小又沒辦法整個不換行放進去….. #####網頁實際切版狀況我們來看看實際上header的部分排版的狀況： 如果以目前這個版面是以Table做排版的情況，並且將header的部分排出來的時候，其實事實上是像圖片上紅線的樣式切出空間然後將圖片、連結就上定位。但是就是因為有固定的寬度，也沒有辦法在為了維持目前的字體大小之下，將其他的瀏覽器加字後完整的不換行放在同一個空間中。所以，千萬別以為只有加「二個字」也是很簡單的事…….設計師們可能要調上好久的時間囉！","link":"/2012/01/16/2012-01-16-lightting-talk-about-add-word-or-picture-at-html-and-showing/"},{"title":"[CSS] 關於網頁中使用CSS中使用嵌入字型","text":"一般來說在設計網站的時候，都是使用預設的系統字型來設計。但如果網站上英文、數字不使用一般系統原有字型。這樣就變成必需要使用另外嵌入的字型了。例如國外的一個服飾網站A&amp;F的網站(如下圖)： 這些字型，可不是圖片，真的是CSS嵌入字型完成的作品….而且IE6 ~ 9、Firefox、Safari、Chrome、Opera都可以正常顯示。但要滿足這麼多瀏覽器的情況，A&amp;F是怎麼樣做到的呢？ 正確的答案就是，使用@font-face！那@font-face要怎麼用呢？請看範例： #####1. 先在css中定義要使用的字型名稱以及字型檔放置的位置我們在A&amp;F的CSS原始碼中查看到其中一個字型的@font-face設定如下： 123456@font-face{ font-family:'Trade Gothic Bold'; /** 這個是設定字型的名稱 **/ src:url('/anf/font/tradegothic-bold-webfont.eot'); /** 設定IE使用的EOT字型檔位置 **/ src:local('☺'),url('/anf/font/tradegothic-bold-webfont.woff') format('woff'),url('/anf/font/tradegothic-bold-webfont.ttf') format('truetype'),url('/anf/font/tradegothic-bold-webfont.svg#webfontmlgY0et7') format('svg'); /** 設定firefox、chrome...等使用的字型檔放置的地方 **/ font-weight:normal;font-style:normal; /** 其餘的css設定 **/} 我們可以發現，其實在使用@font-face的時候，「好像」需要很多不同類型的字型格式檔….但是，不要懷疑。因為真的沒有看錯！！因為各家瀏覽器在支援的字型格式不同的情況下，所以造成了必須要將希望正常顯示字型的瀏覽器都要設定的情況。所以，要使用的時候，需要先將@font-face照前面的程式碼先設定好後，再用一般使用CSS設定字型的方式套用，如下方範例： 12345.changeType{ font-size: 30px; font-family: &quot;Trade Gothic Bold&quot;;} 接下來會看到字型會被套上的樣子…(此字型是套另一個worldwideweb字型) #####2. 那些瀏覽器支援什麼樣的字型檔？基本上，因為常見到的瀏覽器有幾種：IE系列、Firefox、Safari、Chrome。基本上，這幾種瀏覽器都是需要正常顯示出來。初步測試後，支援字型檔的格式如下： IE6, IE7, IE8, IE9： 支援EOT字型檔。 Firefox：支援otf以及ttf、woff Safari：支援svg、otf Chrome (Google 瀏覽器)：支援svg、otf #####3. 這幾個英文是什麼意思？ EOT(Embedded OpenType)： 由微軟制定並於2008年1月提交至W3C的字型規格。因為本篇不是在介紹字型格式，所以詳情可以看這邊了解格式的內容。 OTF(OpenType)：也是由微軟一開始制定，後來adobe也加入共同發展。字型規格 TTF(TrueType)：早期為了對抗Adobe的Type1 Postcript字體而由Apple、微軟共同開發的一種字體標準。字型規格 WOFF(Web Open Font Format)：2010年由Mozzila基金會、Opera、微軟一起送出的Web開放字型格式。 SVG(Scalable Vector Graphics)：這不是一種字型檔，而是基於XML的一種製造二維向量圖形的格式。由W3C制定，是一種開放標準。頁面請見此處 基本上只要特別注意提供支援的格式，其實你也做的到不使用系統預設字型來設計網頁！","link":"/2012/01/20/2012-01-20-css-font-face-in-browsing/"},{"title":"2012年目前在使用的Mac軟體","text":"看看ihower大大也寫了一份，我也來列一下目前我有在用的一些mac軟體的列表。不過有些東西是付費的部分，會在項目最後加上$來表示。 開發工具 sublime text 2 文字編輯器 $$$$$$ Panic coda 1 文字編輯器 $$$$$$ Dash 一堆語言查詢api用。 eclipse 寫java, jsp才用 kaleidoscope diff工具 $$$$$$ MAMP 開發的時候可以切換5.2版跟5.3版。 MySQLWorkBench mysql的client Patterns 拿來試RE用 Producteev 我的專案todo list記錄 Sequel Pro 也是另一個db client netbeans 最近慢慢被sublime text2取代中 Versions 個人覺得用的比較習慣的svn 軟體。 $$$$$$ vmware fusion 4 需要其他系統的時候就打開來用。 $$$$$$ wireshark 寫軟體debug用(我可沒拿來做奇怪的用途XD) homebrew 裝有的沒有的 日常生活 aduim IM軟體(我上msn, yahoo都用這個。但最近一直傳檔都看不到，好苦惱啊….這個軟體一般來說是看不到別人傳來的自訂圖片) Burn 免錢的燒錄軟體，還蠻好用的 Carbon Copy Cloner 拿來完整備份所有的硬體資料用。(當然我還是有用time machine, 只是拿來日常備份) CCleaner 偶爾清理電腦用。 Evernote 寫筆記 Firefox chrome opera flickr uploadr 都用這個來上傳照片到flickr iResize 批次修改圖片大小轉檔 kkbox 偶爾聽聽音樂~ MemoryFree 2 受不了的話就拿來看看能不能釋放些記憶體 Mou 寫文件(markdown語法) Nally 上BBS skype 很少開@@” skitch 截圖用，可網路傳。 siteCapture 可整站截圖，但skitch也有一樣的作用 The Unarchiver 解壓縮檔軟體 TourDeFlex 以前有寫flex的時候拿來查看 VirusBarrier Express 久久掃一下看有沒有奇怪的木馬 vox 聽flac格式音樂用 LibreOffice 用來開office相關檔案 VLC 看DVD或影片用。 Alfred 以前我是用QuickSilver，但後來發現這套實在太好用了。就整個切換過來了。畢竟可以找中文啊~~~ 官方版無蝦米輸入法 $$$$$$ 上網相關 Panic Trasmit dropbox 這個不用說了吧XDDDD iTerm2 取代內建的terminal Little Snitch 防火牆，內建的真的不夠用 $$$$$$ 後來我沒用istate了，因為要付費。這個因為也不是很常看著系統資訊就沒買了。有缺少的再補上來。大家有更好用的軟體可以交流一下。","link":"/2012/09/13/2012-09-13-2012-mac-software-i-used/"},{"title":"[Python]Scrapy簡要上手","text":"人生，沒想到離上次寫部落格竟然會隔了快要半年的時間Orz…工作近期忙碌加上健康狀況有點問題～ 很多事就變成了持續延後了。不過最近玩了scrapy，可以輕鬆簡單的來搜集資料。(千萬別問我可以做什麼XD)所以在開始之前，除了需要先安裝好python環境，也必需要具備使用easy_install這個python的套件安裝工具。安裝方式就不多做解釋了，接下來就來小分享一下心得：官方網址為：scrapy 目前使用的版本為scrapy 0.14.4，python版本為2.7.2。實際上程式在python 2.6運作上也沒有什麼問題就是了。 安裝第一件事，除了要安裝好python的環境之外，請記得先安裝以下相關的套件： scrapylxmltwistedsimplejsonpyopensslw3libTwisted 安裝後，其實scrapy會變成像指令形式。所以在開始撰寫專案的時候跟執行就會用的到。 第一個scraper建立專案：1scrapy startproject projectname 這樣會建立一個叫做projectname的專案資料夾。裡頭有scrapy所需要的內容。當建立之後，我們來看看裡頭的結構： 12345678910111213141516171819└── scraper ├── scraper │ ├── __init__.py │ ├── __init__.pyc │ ├── db.py │ ├── db.pyc │ ├── items.py ＃資訊欄位設定的檔案 │ ├── items.pyc │ ├── pipelines.py │ ├── settings.py ＃設定檔 │ ├── settings.pyc │ └── spiders │ ├── __init__.py │ ├── __init__.pyc │ ├── projectname_spiders.py #此為主要修改的檔案 │ ├── projectname_spiders.pyc └── scrapy.cfg 設定檔 特定幾個檔案會去使用到的部分，大致是這樣的。我們主要撰寫的程式都是在projectname_spider.py這隻程式裡。setting.py設定可以將程式中所需要設定的東西先寫在這邊，再import進程式使用。而scrapy.cfg才是主要是這個專案的設定檔。而items.py內容上會先設定好所需要的欄位資訊進行做定義（例如會想搜隻的資訊如：網址、內容、圖片網址等等。），因為在projectname_spiders.py中我們可能也會使用到它。（就我自己的使用是有先做定義的。） scrapy的基本架構上大致是這樣。因為本身功能還有不少，單就較為簡單的部分做說明。有興趣的人可以再去官方網站的document上研究。 關於spiders所有的邏輯，是需要寫在projectname_spider.py中的def parse(self, response) 裡頭。一般來說，要pase html取得所需要的資訊的時候，會需要將html解析取得需要的資訊。在官方文件中，利用XPath表示的方式如下： 12345678/html/head/title: 從最外層的html中取得&lt;head&gt;&lt;/head&gt;之中&lt;title&gt;&lt;/title&gt;物件/html/head/title/text(): 取得&lt;title&gt;&lt;/title&gt;內容//td: 選取所有的&lt;td&gt;&lt;/td&gt;//div[@class=&quot;mine&quot;]: 取得全部有class=&quot;main&quot; 為屬性的&lt;div&gt; 除了text()之外，還有extract()語法。text()是取得tag中的內容。extract()是將tag之中其他的tag以及內容以unicode字串含資料整個回傳。 執行設定要取得那一個網站上的資訊時，首先，需要先設定一下： 12345678910class projectnameSpider(BaseSpider): name = &quot;projectname&quot; ＃設定專案名稱 allowed_domains = [&quot;www.projectname.com.tw&quot;] ＃設定要抓取資料的網址（為一個list） start_urls = [ &quot;http://www.projectname.com.tw/list/1&quot;, &quot;http://www.projectname.com.tw/list/2&quot;, &quot;http://www.projectname.com.tw/list/3&quot; ] # start_urls設定的資料是將要取得的網頁整個先設定好。 當start_urls 設定好之後，接下來scrapy就會依著start_urls開始將所有的網址資料進行parse。在parse的時候，就是去執行def parse(self, response) 的內容。 不過這個時候一定會有人問說，如果我爬行的資料網址並不固定的話？不可能在一開始在start_urls中設定好所有我想爬行的資料網址。這時候其實可以import Request (from scrapy.http)，然後 1yield Request(next_url, callback = self.parse) 就可以了。 執行方式我們採command line方式執行： 1scrapy crawl projectname 其實projectname 執行的部分就是projectname_spiders.py 結論其實也只是個心得分享，可以拿來做一些事。不過希望大家使用的時候要往正向的方式使用啊～～～如果有任何地方有什麼問題，再請大家多多指教。","link":"/2012/08/18/2012-08-18-scrapy-how-to/"},{"title":"webconf 2013 plurk Alvin演講筆記","text":"臨時因為plurk貼文掛了，後來決定先把剛聽到的先放到blog，再行整理。內容是 雲惟彬 (Alvin)在webconf2013的講題筆記。題目是：錯失過的機會 plurk是第三個創業的網站。 one of the earliest top 1000 websites to implement real time technology Largest website to use key value database (比mongoDB, redis早) very loyal userbase. 40 mins/day 30 language in 1 week 2008年開始流量開始起來。 founder 1 in 加拿大 founder 2 in 丹麥 founder 3 in 台灣 servers in 美國 engineers in 波蘭 Alvin: 覺得plurk的大頭症症狀： 1. 不要錢 2. 不要合作 3. 不要人脈 4. 不要臉 有的時候時間很重要。在高峰的時候總會想到要覺得網站要賣更多錢。 在台灣很多創投會在意股份的問題，拿多少股份。 當公司拿到一定的規模後，開始就會需要走向傳統公司。 社群網站就變成需要拿錢來衝流量。 社群網站一開始又不能太商業化，會把使用者趕走。 創投有自己的人脈，這些人脈是你沒有的。 找到對的人、對的時間、對的人脈都是很剛好的。 到最後：我們不care，應該說，我們care得不夠多。because: 可以在咖啡廳寫寫程式，有的時候可以出國走走玩玩。領一份薪水。 最失敗的問題：對錢這件事沒有概念。 創業成功的關鍵：對錢這件事一定要有概念。要很在意。 錢這件事人都有一個數字，過了之後不見得會有更加的快樂(經濟學：邊際效應遞減法則) 很常跟創投吵架：為錢、為新功能、為流量。 失敗的另一個最大的原因都是因為合夥人吵架。 所以後來吵累了，跑去高雄住一年、跑去玩、偶爾寫個程式，到處去演講。 有的時候不小心會搞到私生活亂七八糟(分手、離婚…etc)。(一定要公、私分的很清楚)。 年輕人都會想要做到像fb那麼大的網站。但其實到最後目標就慢慢離fb的目標很遠。 我覺得最糟糕的就是三個人都不想當 CEO。 最重要的是了解自己。 Alvin: 1. 我不能做CEO 2. 我是product guy 3. 我不喜歡接受採訪 4. 我不喜歡媒體 5. 我只想要寫程式 6. 我很討厭飛 7. 我很討厭演講 等通過很多事情之後，你才會知道你想要什麼。 自己不能做的，就給別人去做。 一開始其實都不太想放手。但要相信你的團隊，相信別人。 當你的對手是國際性的，$100billion，六千位工程師的fb，你不能正面硬撞。 不要去酸別人是抄你的點子，那很難看 點子其實在隨手既有。但產品才是最重要的。點子大家都有，只是沒有變成產品。 噗浪的使用者很注重隱私。私噗很多人用。不過推出相簿的話其實也不見得會有人用。 好好照顧身邊的人。尤其是幫你達到這個規模的人。 後來噗浪慢慢就不一樣了。在流量上南美自2011年6月開始、歐洲也慢慢起來。這看來是第二個機會。 不是很多人都有第二次機會，而且常一下子就掉下去不再起來(ex. friendfeed)","link":"/2013/01/13/2013-01-13-webconf-2013-notes/"},{"title":"Mac os 10.8.3如何安裝mysql_python","text":"其實這篇草稿早在2013/01就寫好了。但一直到今天才有時間整理成中文…..之前在mac上直接安裝python-mysql的時候，一直出現安裝問題。所謂的安裝問題就是發現編譯套件的時候一直裝不起來，在使用的時候即使有辦法import套件但也沒有辦法使用。但因為目前工作環境需要，還是希望能夠好好找到解決方式。解決方法如下： ###一、首先，使用brew安裝python(請記住在mac上使用brew install不要使用sudo) 1brew install python (update to python 2.7) ###二、安裝mysqlmysql是必要先被安裝的。可以選擇直接從mysql官網上下載dmg檔或是使用brew來安裝mysql ###三、安裝設定先從mysql_python的官網下載source code。接下來，我們需要使用以下的方式來執行安裝： 1python setup.py install 接下來會很自動的在編譯後進行安裝。在完成程序後，我們要測試一下是否可以使用： 12&gt; python&gt; import MySQLdb 第一行的作用是進入python指令模式。第二行import的語法才是測試mysql_python是否可以執行。 不過有的時候，會發現某些library無法被載入。所以需要再加幾行到 .bash_profile或是.profile之中… 123MYSQL=/usr/local/mysql/binexport PATH=$PATH:$MYSQLexport DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH 加入後，請記得要source讓設定的路徑生效。這個在mac os 10.8上是可以被運作的。 如果還發生顯示像是「DYLD_LIBRARY_PATH」無法被辨示之類的問題，我們還需要再做一點處理才能讓套件正常運作。這個是個很神奇的問題。當初其實筆者自己使用的時候就是發生找不到「DYLD_LIBRARY_PATH」路徑之類的問題，苦惱了半天還找不到答案。後來，在以下這篇apple官方討論中找到了答案：討論內容：問題出在dyld: DYLD_ environment variables being ignored because main executable (/usr/bin/sudo) is setuid or setgid. (也是討論內容的標題)這也是造成一直無法正常使用的原因之一。處理方式請照步驟處理，可以暫時解決掉這個問題….. 12345678910111213141516171819sudo sh&lt; 接下來請鍵入密碼，然後結果會輸出 &gt;mv /usr/bin/sudo /usr/bin/sudo-realcat &gt; /usr/bin/sudo#!/bin/shSUDU=/usr/bin/sudo-realexec $SUDU $* 2&gt;&gt; /dev/null #一般使用者無法寫出檔案 /var/log/sudu-wrapper-output^C #不要懷疑，這行是ctrl+c進行跳出動作sh-3.2# chmod +x /usr/bin/sudo 這些處理的作用是多包一層sudo來解決這個問題。這個需要手動一個步驟處理即可解決問題。處理之後，就可以開心的使用mysql_python這個套件了。","link":"/2013/05/03/2013-05-03-mysql-python-installation-on-mac-os-10-dot-8-3/"},{"title":"Perl 入門轉換","text":"世事多變化…以前因為寫PHP，對於PHP的符號愈來愈多的狀況下，我的內心曾經一度有一個願望：不要再碰到符號很多的語言了….沒想到…..新工作開始被抓去寫perl… (不知道有多少人會想問為啥我還是寫了，實際上碰了perl之後，發現有不少有趣的部分)對於一開始寫perl老是卡卡的狀況，所以還是把常碰到的問題先記下來，日後避免常被一堆符號搞混…. 注意：目前玩的部分是perl 5.14 ###宣告變數可在檔頭一開始宣告: 「use strict」強制使用嚴謹模式。嚴謹模式下，使用變數都需要事先宣告才可以使用。宣告方式如下 title:宣告perl變數1my $foo = &quot;hello world!&quot;; 不事先宣告就直接將變數拿來使用就會出現直譯錯誤。(基於在php上看過的問題，我還是認為加上strict mode是比較好規範自己撰寫方式的一個辦法。) ###變數分類 分成scalar、hash、array 有pointer 有reference 非常感謝同事指導，利用以下的範例讓我搞清楚一堆符號是什麼作用Orz… ####陣列 title:perl array example1234my @array = (1, 2, 3, 4, 5); #宣告一個陣列# 上面這行可以寫成 my @array = qw/1 2 3 4 5/;print $array[2]; #印出index2的值print @array; # 會印出array size ####陣列的ref title:perl array reference example123my $array_ref = \\@array; #取得array的reference$array_ref = [1, 2, 3, 4, 5]; #定義array reference裡的值print $array_ref-&gt;[2]; #印出array reference中index為2的值 ####hash title:perl hash example12my %hash = (1 =&gt; 'a', 2 =&gt; 'b', 3 =&gt; 'c', 4 =&gt; 'd', 5 =&gt; 'e'); #宣告一個hashprint $hash{2}; #印出index2 -&gt; b ####hash的ref title: perl hash reference example123$hash_ref = \\%hash $hash_ref = {1 =&gt; 'a', 2 =&gt; 'b', 3 =&gt; 'c', 4 =&gt; 'd', 5 =&gt; 'e'}print $hash_ref-&gt;{3} ###沒有switch這件事真的讓我一度覺得很囧，但說實在話，python也是啊，所以還是不要讓這個原因變成我學習的跘腳石。這不是重點啊~(而且其實perl有模組可以達到這件事) ###迴圈#####for寫法 title:perl for迴圈寫法12345678910#陣列印出my @products = (&quot;foo1&quot;, &quot;foo2&quot;, &quot;foo3&quot;, &quot;foo4&quot;, &quot;foo5&quot;);for $item (@prodcts){ print $item;}#1印到10for(1..10){ print $_;} #####foreach寫法 title:perl foreach迴圈寫法12345my @products = (&quot;foo1&quot;, &quot;foo2&quot;, &quot;foo3&quot;, &quot;foo4&quot;, &quot;foo5&quot;);foreach $item (@prodcts){ print $item;} 另外，perl是有while可以用的。 ###環境變數$ENV shell環境變數。 $ENV{HOME} 代表找環境變數裡頭home這個變數的值。 12345678#!/usr/bin/perlprint &quot;Home = $ENV{HOME}\\n&quot;;foreach $key (keys %ENV){ print &quot;$key\\t$ENV{$key}\\n&quot;;} ####plugin安裝使用CPAN或是CPANM，在ubuntu上使用系統的apt-get是最保重互相不會出現conflict最好的方式。","link":"/2014/02/09/2014-02-09-getting-started-with-perl-notes/"},{"title":"關於php浮點數float以及int的問題","text":"這次工作上碰到了一個奇怪的問題。應該說，一般來說大家對浮點數運算上其實沒有太特別注意有什麼不同的狀況。只是覺得最後有小數點就用float，位數不夠就用上double，結果就出事的狀況。而且計算完數字的結果不是多一就是少一。這也太奇怪了，所以這次debug的時候，就連帶把原因也給找了一下。後來發現，其實官網就有特別說明了，但沒有人去注意Warning的那一塊….囧。 電腦基礎是差分器發展而來的，差分器的運作是採泰勒展開式(線性數學)，採函數逼近法算出結果。(就是微分)。此外，浮點數運算是使用IEEE 754(被廣泛使用的浮點數運算標準)。全稱叫「IEEE二進位浮點數算術標準」根據名稱，我們也會理解它是採二進位方式做運算。php是採用IEEE 754 雙精準確度(64bit)做處理的。 在php官網上有指出，所以計算上在1.11e-16取四捨五入的狀況下就會發生問題。一般表示法常見的是使用10進制的來表示，像0.1, 0.7這種在2進制的狀況下，沒有辦法用很精準的方式來表示。只能用近似的方式表達所以精準度上就會有差異，最終的結果就會不是我們要的： 以下範例： 1echo (0.1+0.7)*10 #答案是8 實際運算出來答案會是8, 但以下算完答案會是7，這和我們原先的答案就不同了。 1echo floor((0.1+0.7)*10) #答案會是7 正常來說取floor之後怎麼會突然變成7了？正常的答案不是應該是8嗎？但原因是因為計算出來實際的值其實是：7.9999999999999991118 另外，像是： 1echo 0.1 + 0.2 #真正的答案應該是0.30000000000000004 這個數字是浮點數實際逼近算出來的。php印出來還會是0.3 另一個跟int有相關的，範例如下： 1echo (int)((0.1+0.7) * 10) #答案是7，但應該是8才對吧？ 如果算式是 1echo ((0.1+0.7) * 10) #答案就會是8了！這個才是我們要的 (好大的洞啊…..) php官方建議如果需要高位數的計算的話，需要使用BC Math或是GMP，網址：BC MathGMP 參考內容：簡單的說明浮點數(php官網提供)php官網float說明 (以上的範例都是從php官網相關資料來的) 也許也突顯了一個問題，php的開發人員一開始對於資料類型也許完全沒有特別注意到(畢竟不用一開始就宣告是int, float, double, string …. etc)，也沒有注意到文件底下Warning或Caution的地方，都是先用再說…..但java與其他的語言是否有這樣的狀況，看來要再來試試看。","link":"/2013/06/14/2013-06-14-about-php-float-problem/"},{"title":"[Mac] 2014目前使用的mac 軟體","text":"好久沒更新一下，所以來記錄一下今年有使用的mac軟體列表。不過有些東西是付費的部分，會在項目最後加上$來表示。 開發工具 sublime text 2 文字編輯器 $ Panic coda 1 文字編輯器 $ Dash 一堆語言查詢api用。 eclipse 寫java, jsp才用 kaleidoscope 2 diff工具 $ MAMP Pro 2 開發的時候可以切換多版本的php $ MySQLWorkBench mysql的client Patterns 拿來試RE用 Versions 個人覺得用的比較習慣的svn 軟體。 $ vmware fusion 5 需要其他系統的時候就打開來用。 $ wireshark 寫軟體debug用(我可沒拿來做奇怪的用途XD) homebrew 裝有的沒有的 VirtualHostX 幫忙改改vhost的工具…. astah community 畫UML的工具.. 日常生活 Burn 免錢的燒錄軟體，還蠻好用的 Carbon Copy Cloner 拿來完整備份所有的硬體資料用。(當然我還是有用time machine, 只是拿來日常備份) CleanMyMac 2 用來清理電腦用 $ Evernote 寫筆記 Firefox chrome opera flickr uploadr 都用這個來上傳照片到flickr iResize 批次修改圖片大小轉檔 Spotify 偶爾聽聽音樂~ Mou 寫文件(markdown語法) Nally 上BBS skype 現在常開…雖然沒太好用@@” skitch 截圖用，可網路傳。(已整合evernote了) siteCapture 可整站截圖，但skitch也有一樣的作用 The Unarchiver 解壓縮檔軟體 TourDeFlex 以前有寫flex的時候拿來查看 VirusBarrier Express 久久掃一下看有沒有奇怪的木馬 vox 聽flac格式音樂用 Office 360 (其實就是Microsoft的Office，360是訂閱版，其實家庭一年訂閱來說，還蠻划的來的) $ VLC 看DVD或影片用。 Alfred 以前我是用QuickSilver，但後來發現這套實在太好用了。就整個切換過來了。畢竟可以找中文啊~~~ 官方版無蝦米輸入法 $ Line (不用說了吧) Keynote 做投影片用(apple出的喔) $ OmniGraffle 當初為了要畫一些(流程圖之類的)圖所以買了Orz… $ Xmind 心智圖工具 SourceTree 用git做版控就是用它啦…. MacPaw Gemini 比對檔案內容重覆的工具….(當初跟CleanMyMac一起買…整理電腦用) $ 上網相關 Panic Trasmit dropbox 這個不用說了吧XDDDD iTerm2 取代內建的terminal Little Snitch 防火牆，內建的真的不夠用 $","link":"/2014/03/26/2014-03-26-mac-2014-the-currently-used-mac-software/"},{"title":"Perl 入門轉換 part 2","text":"這篇來些進階的…檔案IO以及正規表示法的部分 檔案輸出入 (File I/O)可以根據使用「&gt;」或「&lt;」來指定是否是讀檔或是輸出檔案。「&lt;」是讀入，而「&gt;」是輸出 (這點跟shell script是一致的)另外會看到「**&lt;&gt;」這個符號，一般稱之為鑽石符號**。這符號用途是將一個屬於陣列夾在鑽石符號中，然後將其值一個一個讀取出來。(有人會認為那是一種iterator…這點我也需要求證。但感覺是蠻像的)通常#####一般讀檔並印出內容 title: read file and print it123456789my $file = &quot;list.txt&quot;;if(open(FH, '&lt;', $file)){ while(&lt;FH&gt;){ print $_; } close(FH);}# 這樣會把list.txt的檔案內容讀出來 指定輸入編碼，並讀檔後印出內容title: read file by encoding utf8 and print it123456789my $file = &quot;list.txt&quot;;if(open(FH, '&lt;:utf8', $file)){ while(&lt;FH&gt;){ print $_; } close(FH);}# 這樣會把list.txt的檔案內容用UTF8讀出來。然後印出 輸出至檔案title: read file and output to a file12345678910111213my $file = &quot;list.txt&quot;;if(open(FH, '&lt;', $file)){ if(open (FILE, '&gt;', &quot;output.txt&quot;)){ while(&lt;FH&gt;){ print FILE $_; } } close(FILE); close(FH);}# 這會將list.txt的內容，完整的輸出到output.txt檔案之中 其實照範例來看，perl的語法上其實簡單不少。但因為一些個人學習上的經驗，反而需要去多瞭解清楚背後的意義。否則，其實是很好懂的語法。(人工混碼不算啊 ~ ~ 啊 ~ ~ 啊 ~ ~) 正規表示法 (Reqular Expression)其實在很多語言裡都有正規表示法。在Perl之中，正規表示法是Perl的第二把超級利器。而我也發現在Perl裡寫reqular expression的機率大概高於別的語言不少。其實正式表示法真的寫起來是蠻大一篇的。我這邊推薦可以直接閱讀以下二個連結： Perl 學習手札 Perl的基本語法 這二個連結其實在學習Perl上會有很大的幫助。 從match pattern中取得變數在Perl的RE中，可以在表示法中設定要取得的位置為變數，接下來程式可以拿來處理。例如： title: get parameter from RE pattern match12345678910use strict;my $content = &quot;Perl is Great!&quot;;if($content =~ /^(\\w*) \\w* (\\w*)!/){ # 一個括號代表會有一個變數。照左至右取得順序。 print $1; # 預設的變數名稱都是由1開始編號下去。直接取得既可 print $2;}# 所以會印出：# $1是Perl# $2是Great 從match pattern中替換文字有一件很重要的事：在Perl中，要實現replace(取代)文字的功能，是需要利用RE來處理的。所以一定要會！在下面範例示範怎樣取代原來的文字 Title: replace word by RE pattern match123456my $content = &quot;Perl is Great!&quot;;if($content =~ s/Perl/Java/gi){ #開頭s是表示要做替換。而結尾的gi修飾子，g是代表內容全部都要搜尋，i比對的時候不需要在意大小寫。 print $content;}# 所以會印出：Java is Great! 更多的部分跟屬性，其實參考先前二個很連結，會有很多收獲，接下來就是要好好的練習囉。","link":"/2014/05/10/2014-05-10-introduction-to-perl-conversion-part2/"},{"title":"Mac上如何建立Rails的開發環境","text":"太久沒玩Ruby很多東西也整個忘的很乾淨了。這次試著將一些東西撿回來(主要是想使用Ruby on Rails)。所以重新整理了環境建置的筆記。(主要的intruction是參照：ihower的Ruby on Rails 實戰聖經) 目前環境：Mac OS 10.10 (Yosemite)原生Ruby Version: 2.0.0p481 Ruby環境設定： 先在mac環境上安裝Homebrew (一個方便在mac上使用的工具套裝管理套件。也有的人喜歡用MacPorts) 連結：http://brew.sh/ 安裝RVM:安裝RVM的目的主要是可以指定安裝Ruby/JRuby的版本並進行環境的管理。 Instruction: 請見這邊 目前版本的RVM安裝前，會需要先處理security的部分。所以會需要安裝gpg(或gpg2等套件)進行才能進行設定。(這時候會需要利用brew install gpg security安裝設定請見：這邊 完整的RVM官方安裝說明請見：這邊 請記得安裝 MySQL (這個部分安裝是為了使用Ruby on Rails用的。如果不需要也可以不用安裝。建置可以直接利用homebrew安裝即可。也可以從官方下載。官方下載安裝可以按裝其中附的套件，就可以在「設定」中進行MySQL Server的開啟/關閉) 寫到這邊大致也完成了基本的環境建置。接下來要設定Rails的部分了… Rails環境設定：Ruby環境的前置作業設定後，即可以使用Gem來做Ruby的套件管理。接下來要安裝Rails的環境：gem install rails接下來會將該套件的相關package下載進行安裝。(如果不需要安裝套件內包裝的文件。請記得加上參數或在預設gem設定加預設安裝即不安裝文件)目前Gem套件也和Perl一樣有網站可以查看其熱門度。The Ruby Toolbox 到目前為止，大致完成環境設定。就可以進行下一步了。","link":"/2015/09/17/2015-05-26-ruby-ruby-environments-build-on-mac-os/"},{"title":"在mac上建立python開發的虛擬環境virtualenv","text":"python virtualenv configuration。(參照：virtualenv官網) 目前環境：Mac OS 10.11.3 (EI capitan)原生Python Version: 2.7.10 Python環境設定： 先在mac環境上已經有原生的Python，版本是2.7.10。接下來先執行以下指令安裝pip sudo easy_install pip 安裝 virtualenv:安裝pip之後，執行pip來安裝virtualenv pip install virtualenv 接下來，可以直接執行 virtualenv python27 # python27為資料夾的名稱 這樣會安裝到指定的資料夾名稱之內。要使用這個virtual environment的時候，只要： source python27/bin/active 就可以執行這個環境。要離開的時候，也只需要直接執行 deactive 就可以退出這個virutualenv了。","link":"/2016/03/16/2016-03-16-python-python-mac-virtualenv-configuration/"},{"title":"AWS CloudSearch研究筆記","text":"因為之前公司需求，研究了AWS的cloudsaerch以及Elastic search二套。這篇就之前研究的cloudsearch的部分做一個簡單的筆記。Amazon AWS的cloudsearch是一個讓人能夠簡單建立一個搜尋的服務。在中文分詞的部分是已建立了…但倒是有一件很重要的事情就是，中文搜尋的部分，基本上一定要建入「二個中文字」才能進行搜尋。因為一個中文字，在搜尋中是不被認成是一個詞，這點是在使用上最重要要注意的部分，接下來就細節建議進一步說明。 在一開始要建立一個cloudsearch的時候，我們必需要先建立一個domain。在cloudsearch中，一個domain，我們當成是一個大的table。所有的資料都是在這個table中搜尋。接下來每一個在cloudsearch中的index則為一個欄位。這點會方便我們在一開始進入使用cloudsearch的時候不清楚該如何操作時，利用了一點RMDB的觀點來理解(但這並非完全對或錯)。這個方式和之前在看Elastic search的時候有一個對照在理解操作方式： RMDB DB Table rowcolumn ES Index Type document fields ** ES指的是Eastic Search 接下來在觀念較為清楚的狀態下，我們要再注意一點，就是在search的條件。我們一般在做搜尋是資料精確度由最精準到愈不精準排序下來的。在AWS中也是有地方可以調整自己的ranking pattern的，這個部分要另外再做研究了。 在Cloudsearch中可以使用輸入search的方法照官方文件中有幾種： simple - 籍由較簡單的url parameter的方式把想搜尋的資料丟進去搜尋。 structured - 除了simple的方式外另外加上可以特別指定搜尋的欄位以及一些綜合條件。 lucene - 不用多說，就是提供和Apache Lucene的語法條件方式讓使用者使用 dismax - 除了使用Apache Lucene的解析方式以及dismax的語法 這幾個方式並沒有特別的好或是不好，以自己在開發時所需要的方式使用。最後二個因為是提供lucene的語法，在AWS的文件上並沒有特別說明，這個部分就要去Apache Lucene去查語法來使用。 以最基本來說，能夠將資料完整倒進去，就可以完成一個很簡單的搜尋功能，其餘就要看怎麼發揮了….","link":"/2016/09/27/2016-09-27-elasticsearch-notes/"},{"title":"R語言設定以及基本使用概念","text":"因為修課的關係所以需要記錄一下： 安裝很簡單，只需要去官網下載即可。下載後有預設編輯器可以使用。如果要使用command line也行，只需要執行 1R 沒看錯，打進去就會啟動R language的command line mode。想要hello world只要 1print(&quot;hello world&quot;) 這樣執行就可以了。 語言轉換重點 語法有python的味道，陣列以vector型式處理。vector index從1開始算(很多語言都是用0開始) 陣列range可以這樣顯示[3:5] 印出3, 4, 5 一個陣列可以直接印出一個範圍: sentence([3:5]) -&gt;印出sence中index3到5的內容 array value assign的時候可以一次assign到幾個index中: setence[3:5] &lt;- c(‘1’, ‘2’, ‘3’) 在語言中「&lt;-」是assign的意思(也可以用=來代表assign) 對了，跟Python一樣結尾可是沒有分號的喔！ package的安裝與使用套件工具：CRAN。要安裝套件的時候請將以下指令請在R的command mode裡面執行 1install.package(&quot;套件名稱&quot;) 第一次執行會需要選擇要下載的預設伺服器。接下來就會安裝完成。完成後，就可以用以下的方法開始使用： 1require(&quot;套件名稱&quot;) 或是 1Library(&quot;套件名稱&quot;) 如果不確定是否有安裝，也可以用這個指令來確認安裝細節 1installed.packages(&quot;套件名稱&quot;) 如何執行外部寫好的r script?如果是在官方提供的R編輯執行器，請在command mode底下執行： 1source(&quot;完整檔案路徑&quot;) BUT, 人生就是這個BUT，當如果是利用terminal console之類的，可以切換到要執行的script的路徑底下，直接執行： 1source(&quot;檔案名稱&quot;) 這樣就可以執行寫好的script了。","link":"/2016/09/27/2016-09-27-r-language-notes/"},{"title":"設定zsh為預設shell (linux平台)","text":"其實用了超久結果每次電腦重灌都要再挖一次記錄，直接簡單記錄改用zsh做為基本使用的shell。 首先，要先裝好homebrew: brew install zsh 設定oh-my-zsh: 以下擇一即可，一個是用wget來安裝，另一個是curl來處理 sh -c “$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)” sh -c “$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)” (設定使用https://github.com/robbyrussell/oh-my-zsh)3. brew install zsh-completions 基本上應該這樣就可以完成基本設定，而且預設會把bash改成zsh。另外，如果想修改theme的話，預設系統的theme是放在：~/.oh-my-zsh/themes (theme是由oh-my-zsh提供的)，基本上來說，可以透過這篇官方說明來設定。這樣就大功告成了。","link":"/2017/01/29/2017-01-29-configure-mac-os-use-zsh/"},{"title":"前端設定專案livereload (利用gulp)","text":"因為開發需要，希望可以自動監控專案底下的HTML/CSS/JavaScript，只要有變更即更新瀏覽器，就不用手動自己重新整理了。而且寫Less的時候，也可以在存檔的時候自動compile成css使用，很方便的處理方式~ 接下來就開始把環境設定一下： 初始化專案並且建立package.json npm init --yes 建立node.js的虛擬環境：(先請安裝nodeenv) nodeenv .env 後面的.env可以置換成想要置放的資料夾名稱 將環境換成剛剛建好的node.js虛擬環境(此做法在於如果不小心出了問題，比較不會影響到整個電腦的node.js環境source .env/bin/actiave 到時候有需要退出環境的時候，只需要直接執行deactivate_node 就可以退出環境了。 安裝所需要的套件：這個安裝的目的是希望能夠監控專案裡面的HTML/LESS/JavaScript檔案，有變更的時候就會編譯LESS或是重新整理正在開發的瀏覽器(即Livereload的功能)，基本上來說，需要先利用npm安裝以下幾個套件： gulp 這邊個人會使用gulp來處理，其實也可以使用grunt，但因為沒玩過就是了。(記得要安裝在global) gulp-cli (在terminal使用gulp，記得要裝在global) gulp-less browser-sync (檔案改變的時候可以將結果同步瀏覽器，不用再另外安裝extension) 接下來就示專案需求可以安裝webpack或是babel之類的工具了。 設定gulpfile.js因為gulp吃的是gulpfile.js，請先在專案根目錄中設定gulpfile.js，接下來準備設定gulpfile.js的部分： 這邊是先在gulpfile.js上設定載入使用的libraryvar gulp = require(\"gulp\");var less = require(\"gulp-less\");var browsersync = require(\"browser-sync\").create(); 下方的部分是設定less file compilegulp.task('less',function(){ gulp.src('./less/*.less') .pipe(less()) .pipe(gulp.dest('./css/'))}); 設定監控檔案，有變動即利用rowsersync重新整理瀏髡器gulp.task('watch',function(){ gulp.watch('./less/.less',['less']).on(\"change\", browsersync.reload) gulp.watch('./js/.js').on(\"change\", browsersync.reload) gulp.watch(\"./*.html\").on(\"change\", browsersync.reload)}); browser sync configurationgulp.task('browser-sync', function(){ browsersync.init({ server: { baseDir: \"./\", proxy: \"test.dev\" }, ui: { port: 3000, weinre:{ port: 3001 } } })}) 這個是最後一行需要放上的部分，default startup的設定gulp.task('default',['less','watch', 'browser-sync']); 以上檔案處理完畢後，就可以回到專案資料夾根目錄的地方，直接用gulp即可以執行我們設定好的環境並且進行開發了。","link":"/2017/06/19/2017-06-19-frontend-develop-enviornment-configuration/"},{"title":"Git指令速記","text":"Git指令速記 (因為太常忘記了) git branch branch: git branch git branch delete a branch git push origin --delete local branch to remote: git push -u origin {branch_name} tag list tag: git tag 打tag: push all tag到remote: git push origin --tags checkout remote tag: git checkout tags/version {version number} git checkout checkout remote branch (new version git): git fetch git checkout git revert// revert code to specific point you want to keepgit reset --hard {hash} // move branch pointer back to previous HEADgit reset --soft HEAD@{1} // remember commit revert changegit commit -m \"revert to {hash}\" git rebase","link":"/2017/06/22/2017-06-22-git-command-notes/"},{"title":"MySQL指令備份table","text":"不小心踩到的雷~ 該記一下： 1create table `new_table` like `table_name`; 會把原來要備份的table的屬性一併寫到建立的新table，像是primiry key, auto_increment之類的。但如果是以下的語法建立備份table的話 1create table `new_table` select * from `table_name`; 雖然會幫忙把要備份的table也一併塞入資料，但是原有的屬性，像是primiry key或是auto_increment也都會不見。連預設的charset也會變成是預設的charset，不會把原來要備份的table的encoding也一併設定好。這點要特別注意。","link":"/2017/06/19/2017-12-20-mysql-(mariadb)-duplicate-table-command-notes/"},{"title":"Laravel 支援多資料庫存取設定","text":"Laravel 5.5 (或以上) 設定多資料庫設定需要處理幾個地方。 .env的部分可以把database的相關全部註解掉(欸 在config/database.php裡面，先設定要連的db有幾個： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748connections' =&gt; [ 'db1' =&gt; [ 'driver' =&gt; 'mysql', 'host' =&gt; env('DB_HOST', '127.0.0.1'), 'port' =&gt; env('DB_PORT', '3306'), 'database' =&gt; env('DB_DATABASE', 'db1'), 'username' =&gt; env('DB_USERNAME', 'db1'), 'password' =&gt; env('DB_PASSWORD', 'db1'), 'unix_socket' =&gt; env('DB_SOCKET', ''), 'charset' =&gt; 'utf8mb4', 'collation' =&gt; 'utf8mb4_unicode_ci', 'prefix' =&gt; '', 'strict' =&gt; true, 'engine' =&gt; 'InnoDB', ], 'db2' =&gt; [ 'driver' =&gt; 'mysql', 'host' =&gt; env('DB_HOST', '127.0.0.1'), 'port' =&gt; env('DB_PORT', '3306'), 'database' =&gt; env('DB_DATABASE', 'db2'), 'username' =&gt; env('DB_USERNAME', 'db2'), 'password' =&gt; env('DB_PASSWORD', 'db2'), 'unix_socket' =&gt; env('DB_SOCKET', ''), 'charset' =&gt; 'utf8mb4', 'collation' =&gt; 'utf8mb4_unicode_ci', 'prefix' =&gt; '', 'strict' =&gt; true, 'engine' =&gt; 'InnoDB', ], 'db3' =&gt; [ 'driver' =&gt; 'mysql', 'host' =&gt; env('DB_HOST', '127.0.0.1'), 'port' =&gt; env('DB_PORT', '3306'), 'database' =&gt; env('DB_DATABASE', 'db3'), 'username' =&gt; env('DB_USERNAME', 'abc'), 'password' =&gt; env('DB_PASSWORD', 'abc'), 'unix_socket' =&gt; env('DB_SOCKET', ''), 'charset' =&gt; 'utf8mb4', 'collation' =&gt; 'utf8mb4_unicode_ci', 'prefix' =&gt; '', 'strict' =&gt; true, 'engine' =&gt; 'InnoDB', ], ] 在config/database.php中設定預設會連線的database是哪一個： 1'default' =&gt; 'db1', 原則上這樣的處理方式就可以使用了。不過如果是設定利用Eloquent撈資料的話，要注意一下在建立model後要先做一些設定： 1234567class Room extends Model{ private $connection = 'db1'; protected $table = &quot;table1&quot;; protected $fillable = [];} 這樣就可以在使用Eloquent的時候連到對的table上了。","link":"/2018/01/22/2018-01-22-larave5-mutiple-database-connection-configuration/"},{"title":"Laravel Configuration on AWS EC2 Ubuntu 20.04LTS Instance Installation - Laravel 9於AWS EC2上的環境設定","text":"有點久沒做環境設定，最近在寫side project遇到了環境設定。即然Laravel都已經到了Laravel 9了，是該把一些整合設定留下來… 所需Package Ubuntu 20.04 LTS and update Curl Docker (Laravel 9官方採用Sail這套工具進行環境管理) PHP 8.1 Composer 安裝步驟Step 1 Start a AWS EC2 InstanceBasically, Curl is default installed. Step 2 安裝Docker community version先確認先前的安裝是否有移除： 1sudo apt-get remove docker docker-engine docker.io containerd runc 接著更新一下系統 1sudo apt-get install ca-certificates curl gnupg lsb-release 將docker的官方key加入到系統內 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 設定使用stable branch的docker 123echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null 再利用sudo apt-get update 更新一下系統，然後來正式安裝了： 1apt-get install docker-ce docker-ce-cli containerd.io 執行以下指令確定是否有安裝成功： 1sudo docker run hello-world 接下來我們會遇到的事情是，因為安裝後要執行docker的相關指令或許會碰到必需要使用root權限(即使用sudo)才能正常執行，但並不想要這麼麻煩，所以接下來需要執行以下script 123sudo usermod -aG docker ${USER}su - ${USER}sudo usermod -aG docker {Username} 然後重新打開terminal之後，應該能夠正常的直接使用docker執行不需要再使用sudo來輔助執行了！ Reference: Docker install Digital Ocean: Docker install Step 3 Install PHP 8.1 on Ubuntu 20.04 LTS先安裝以下套件： 1sudo apt install software-properties-common 接下來加入以下PHP套件來源 1sudo add-apt-repository ppa:ondrej/php 接著進行update 1sudo apt update 正式安裝php所需的相關套件：(請依照所需進行安裝) 1sudo apt-get install php8.1 php8.1-common php8.1-mbstring php8.1-mcrypt php8.1-cli php8.1-fpm php8.1-mysql php8.1-zip 接著就可以在shell中試著顯示PHP版本確認是否安裝成功~ Step 4 Install Composer請參照Composer官方網站執行以下script 1234php -r &quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;php -r &quot;if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink('composer-setup.php');&quot; 執行後，在本機執行ls指令會看到 composer.phar 這個檔案，為了日後執行方便，請執行以下script: 12sudo mv composer.phar /usr/local/bin/composer 成功執行之後，就可以在shell直接以下列指令直接執行composer工作 1composer 接下來你可以clone your repository project或是開始進行Laravel 建立新專案進行開發作業。","link":"/2021/01/22/2021-01-23-laravel9-configuration-on-AWS-EC2-Ubuntu-20.04LTS-installation/"}],"tags":[{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"FTP","slug":"FTP","link":"/tags/FTP/"},{"name":"ActionScript","slug":"ActionScript","link":"/tags/ActionScript/"},{"name":"Sybase","slug":"Sybase","link":"/tags/Sybase/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"Bazzer","slug":"Bazzer","link":"/tags/Bazzer/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"FreeBSD","slug":"FreeBSD","link":"/tags/FreeBSD/"},{"name":"Centos","slug":"Centos","link":"/tags/Centos/"},{"name":"Mercurial","slug":"Mercurial","link":"/tags/Mercurial/"},{"name":"Software Engineering","slug":"Software-Engineering","link":"/tags/Software-Engineering/"},{"name":"Java Spring","slug":"Java-Spring","link":"/tags/Java-Spring/"},{"name":"Quercus","slug":"Quercus","link":"/tags/Quercus/"},{"name":"Zend Framework1","slug":"Zend-Framework1","link":"/tags/Zend-Framework1/"},{"name":"jQuery Gride","slug":"jQuery-Gride","link":"/tags/jQuery-Gride/"},{"name":"Capistrano","slug":"Capistrano","link":"/tags/Capistrano/"},{"name":"Vlad","slug":"Vlad","link":"/tags/Vlad/"},{"name":"Redmine","slug":"Redmine","link":"/tags/Redmine/"},{"name":"Apache Ant","slug":"Apache-Ant","link":"/tags/Apache-Ant/"},{"name":"phing","slug":"phing","link":"/tags/phing/"},{"name":"Ruby on Rails","slug":"Ruby-on-Rails","link":"/tags/Ruby-on-Rails/"},{"name":"CoffeScript","slug":"CoffeScript","link":"/tags/CoffeScript/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"CSS3","slug":"CSS3","link":"/tags/CSS3/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"Scrapy","slug":"Scrapy","link":"/tags/Scrapy/"},{"name":"WebConf 2013","slug":"WebConf-2013","link":"/tags/WebConf-2013/"},{"name":"Perl","slug":"Perl","link":"/tags/Perl/"},{"name":"Ruby","slug":"Ruby","link":"/tags/Ruby/"},{"name":"R-language","slug":"R-language","link":"/tags/R-language/"},{"name":"frontend","slug":"frontend","link":"/tags/frontend/"},{"name":"Laravel, PHP","slug":"Laravel-PHP","link":"/tags/Laravel-PHP/"},{"name":"Laravel","slug":"Laravel","link":"/tags/Laravel/"}],"categories":[],"pages":[{"title":"about","text":"This is a blog that fullfill all development records but not especially in PHP.","link":"/about/index.html"}]}